{
	"allQuestions": [{
		"id": 1,
		"question": "Android is -",
		"category": "android",
		"answer": ["a web browser", "an operating system", "a web server", "None of these"],
		"correctAnswer": "an operating system"
	}, {
		"id": 2,
		"question": "Under which of the following Android is licensed?",
		"category": "android",
		"answer": ["OSS", "OSS", "Apache/MIT", "None of these"],
		"correctAnswer": "Apache/MIT"
	}, {
		"id": 3,
		"question": "For which of the following Android is mainly developed?",
		"category": "android",
		"answer": ["Mobile devices", "Watch", "Desktops", "Servers"],
		"correctAnswer": "Mobile devices"
	}, {
		"id": 4,
		"question": "Which of the following is the first mobile phone released that ran the Android OS?",
		"category": "android",
		"answer": ["Google gPhone", "T - Mobile G1", "Samsung", "Motorola"],
		"correctAnswer": "T - Mobile G1"
	}, {
		"id": 5,
		"question": "Which of the following virtual machine is used by the Android operating system?",
		"category": "android",
		"answer": ["Simple virtual machine", "JVM", "Dalvik virtual machine", "None of these"],
		"correctAnswer": "Dalvik virtual machine"
	}, {
		"id": 6,
		"question": "APK stands for -",
		"answer": ["Android Page Kit", "Android Phone Kit", "Android Package Kit", "None of these"],
		"category": "android",
		"correctAnswer": "Android Package Kit"
	}, {
		"id": 7,
		"question": "What does API stand for?",
		"answer": ["Application Page Interface", "Application Programming Interface", "Android Programming Interface", "Android Page Interface"],
		"category": "android",
		"correctAnswer": "Application Programming Interface"
	}, {
		"id": 8,
		"question": "Which of the following converts Java byte code into Dalvik byte code?",
		"answer": ["Dex compiler", "Virtual Machine", "Mobile interpretive compiler (MIC)", "Dalvik converter"],
		"category": "android",
		"correctAnswer": "Dex compiler"
	}, {
		"id": 9,
		"question": "How can we stop the services in android?",
		"answer": ["By using system.exit() method", "By using the stopSelf() and stopService() method", "By using system.exit() method", "By using system.stop() method"],
		"category": "android",
		"correctAnswer": "By using the stopSelf() and stopService() method"
	}, {
		"id": 10,
		"question": "What is an activity in android?",
		"answer": ["android package", "android resourse", "android class", "A single screen in an application with supporting java/kotlin code"],
		"category": "android",
		"correctAnswer": "A single screen in an application with supporting java/kotlin code"
	}, {
		"id": 11,
		"question": "How can we kill an activity in android?",
		"answer": ["Using finishActivity(int requestCode)", "Using finish() method", "Neither (a) nor (b)", "Both (a) and (b)"],
		"category": "android",
		"correctAnswer": "Both (a) and (b)"
	}, {
		"id": 12,
		"question": "ADB stands for -",
		"answer": ["Android destroy bridge", "Android delete bridge", "Android debug bridge", "None of these"],
		"category": "android",
		"correctAnswer": "Android debug bridge"
	}, {
		"id": 13,
		"question": "On which of the following, developers can test the application, during developing the android applications?",
		"answer": ["Physical android phone", "Third-party emulators", "Emulator included in Android SDK", "All of the above"],
		"category": "android",
		"correctAnswer": "All of the above"
	}, {
		"id": 14,
		"question": "Which of the following kernel is used in Android?",
		"answer": ["Redhat", "Linux", "Windows", "MAC"],
		"category": "android",
		"correctAnswer": "Linux"
	}, {
		"id": 15,
		"question": "Which of the following is the first callback method that is invoked by the system during an activity life-cycle?",
		"answer": ["onRestart() method", "onStart() method", "onCreate() method", "onAttach() method"],
		"category": "android",
		"correctAnswer": "onCreate() method"
	}, {
		"id": 16,
		"question": "Which of the following is not an activity lifecycle callback method?",
		"answer": ["onCreate() method", "onBackPressed() method", "onResume() method", "onCreate() method"],
		"category": "android",
		"correctAnswer": "onBackPressed() method"
	}, {
		"id": 17,
		"question": "We require an AVD to create an emulator. What does AVD stand for?",
		"answer": ["Android Virtual device", "Active Virtual display", "Android Virtual display", "Android Virtual display"],
		"category": "android",
		"correctAnswer": "Android Virtual device"
	}, {
		"id": 18,
		"question": "Does android support other languages than java?",
		"answer": ["Can't Say", "No", "Yes", "May be "],
		"category": "android",
		"correctAnswer": "Yes"
	}, {
		"id": 19,
		"question": "What is the use of content provider in Android?",
		"answer": ["For sending the data from an application to another application", "For sending messages to other application", "For storing the data in the database", "For sending the data from an application to another application"],
		"category": "android",
		"correctAnswer": "For sending the data from an application to another application"
	}, {
		"id": 20,
		"question": "AAPT stands for -",
		"answer": ["Android Action Packaging Tool", "Android Activity Packaging Tool", "Android Asset Packaging Tool", "None of these"],
		"category": "android",
		"correctAnswer": "Android Asset Packaging Tool"
	}, {
		"id": 21,
		"question": "NDK stands for -",
		"answer": ["Native Development Kit", "New Development kit", "Native Design Kit", "None of these"],
		"category": "android",
		"correctAnswer": "Native Development Kit"
	}, {
		"id": 22,
		"question": "Which of the following is contained in the src folder?",
		"answer": ["Manifest", "Java source code", "XML", "None of these"],
		"category": "android",
		"correctAnswer": "Java source code"
	}, {
		"id": 23,
		"question": "Which of the following method is used to handle what happens after clicking a button?",
		"answer": ["onCreate", "onSelect", "onClick", "onClicked"],
		"category": "android",
		"correctAnswer": "onClick"
	}, {
		"id": 24,
		"question": "Which of the following android component displays the part of an activity on screen?",
		"answer": ["Intent", "Fragment", "Service", "Intent"],
		"category": "android",
		"correctAnswer": "Fragment"
	}, {
		"id": 25,
		"question": "In which of the following tab an error is shown?",
		"answer": ["Profiler", "Logcat", "CPU", "Memory"],
		"category": "android",
		"correctAnswer": "Logcat"
	}, {
		"id": 26,
		"question": "Which of the following is the topmost layer of android architecture?",
		"answer": ["System Libraries and Android Runtime", "Applications Framework", "Applications", "Linux Kernel"],
		"category": "android",
		"correctAnswer": "Applications"
	}, {
		"id": 27,
		"question": "Which of the layer is the lowest layer of android architecture?",
		"answer": ["Applications", "Applications Framework", "Linux Kernel", "System Libraries and Android Runtime"],
		"category": "android",
		"correctAnswer": "Linux Kernel"
	}, {
		"id": 28,
		"question": "What is contained in manifest.xml?",
		"answer": ["List of strings used in the app", "Source code", "App assests", "Permission that the application requires"],
		"category": "android",
		"correctAnswer": "Permission that the application requires"
	}, {
		"id": 29,
		"question": "Which of the following is not a state in the service lifecycle?",
		"answer": ["Paused", "Destroyed", "Running", "Start"],
		"category": "android",
		"correctAnswer": "Paused"
	}, {
		"id": 30,
		"question": "Which of the following is not a nickname of any android version?",
		"answer": ["Honeycomb", "Muffin", "Donut", "Cupcake"],
		"category": "android",
		"correctAnswer": "Muffin"
	}, {
		"id": 31,
		"question": "Which of the following is a dialog class in android?",
		"answer": ["AlertDialog", "DatePicker Dialog", "AlertDialog", "All of the above"],
		"category": "android",
		"correctAnswer": "All of the above"
	}, {
		"id": 32,
		"question": "Which of the following is a dialog class in android?",
		"category": "android",
		"answer": ["ProgressDialog", "AlertDialog", "DatePicker Dialog", "All of the above"],
		"correctAnswer": "All of the above"
	}, {
		"id": 33,
		"question": "In which state the activity is, if it is not in focus, but still visible on the screen?",
		"category": "android",
		"answer": ["Paused state", "Destroyed state", "Rest State", "Running state"],
		"correctAnswer": "Paused state"
	}, {
		"id": 34,
		"question": "Which of the following is the built-in database of Android?",
		"category": "android",
		"answer": ["Oracle", "MySQL", "SQLite", "MongoDB"],
		"correctAnswer": "SQLite"
	}, {
		"id": 35,
		"question": "Android is developed by ",
		"category": "android",
		"answer": ["Samsung", "Microsoft", "Google", "Android Inc"],
		"correctAnswer": "Android Inc"
	}, {
		"id": 36,
		"question": "Android Web Browser Is Based On",
		"category": "android",
		"answer": ["Open-source Webkit", "Chrome", "Firefox", "Safari"],
		"correctAnswer": "Open-source Webkit"
	}, {
		"id": 37,
		"question": "Which Media Format Is Not Supported By Android",
		"category": "android",
		"answer": ["AVI", "MPEG", "MP4", "MIDI"],
		"correctAnswer": "AVI"
	}, {
		"id": 38,
		"question": "In Which Directory  XML Layout Files Are Stored",
		"category": "android",
		"answer": ["/res/values", "/res/layout", "/assets", "/src"],
		"correctAnswer": "/res/layout"
	}, {
		"id": 39,
		"question": "View Pager Is Used For",
		"category": "android",
		"answer": ["Paging Down List Items", "Swiping Activities", "Paging Down List Items", "Swiping Fragments"],
		"correctAnswer": "Swiping Fragments"
	}, {
		"id": 40,
		"question": "What Is JNI In Android?",
		"category": "android",
		"answer": ["Image Editable Tool", "Java Network Interface", "Java Native Interface", "Java Interface"],
		"correctAnswer": "Java Native Interface"
	}, {
		"id": 41,
		"question": "ANR in android stands for -",
		"category": "android",
		"answer": ["Application Not Responding", "Application Not Rendering", "Application Not Reacting", "None of these"],
		"correctAnswer": "Application Not Responding"
	}, {
		"id": 42,
		"question": "All layout classes are the subclasses of -",
		"category": "android",
		"answer": ["android.view.ViewGroup", "android.view.View", "android.widget", "None of these"],
		"correctAnswer": "android.view.ViewGroup"
	}, {
		"id": 43,
		"question": "Which of the following class in android executes the task asynchronously with your service?",
		"category": "android",
		"answer": ["AsyncTask", "SyncTask", "Both of the above", "Main Thread"],
		"correctAnswer": "AsyncTask"
	}, {
		"id": 44,
		"question": "Which of the following layout in android arranges its children into rows and columns?",
		"category": "android",
		"answer": ["RowLayout", "FrameLayout", "TableLayout", "LinearLayout"],
		"correctAnswer": "TableLayout"
	}, {
		"id": 45,
		"question": "Which of the following layout in android aligns all children either vertically or horizontally?",
		"category": "android",
		"answer": ["LinearLayout", "RelativeLayout", "TableLayout", "FrameLayout"],
		"correctAnswer": "LinearLayout"
	}, {
		"id": 46,
		"question": "What is the default value of the orientation attribute in LinearLayout?",
		"category": "android",
		"answer": ["Vertical", "Horizontal", "There is no default value of orientation attribute in LinearLayout", "None of these"],
		"correctAnswer": "Horizontal"
	}, {
		"id": 47,
		"question": "What is the nine-patch images tool in android?",
		"category": "android",
		"answer": ["It is an image extension tool.", "It is used to change the bitmap images into nine sections", "Both (a) and (b)", "Both (a) and (b)"],
		"correctAnswer": "It is used to change the bitmap images into nine sections"
	}, {
		"id": 48,
		"question": "GCM in android stands for -",
		"category": "android",
		"answer": ["Google Count Messaging", "Google Center Messaging", "Google Cloud Messaging", "None of these"],
		"correctAnswer": "Google Cloud Messaging"
	}],
	"interviewQuestions": [{
		"id": 1,
		"category": "android",
		"subType": "android",
		"question": "What is Android?",
		"referenceLink": "https://en.wikipedia.org/wiki/Android_(operating_system)",
		"answer": "<p><strong>Android </strong>is an open source and Linux-based&nbsp;<strong>Operating System</strong>&nbsp;for mobile devices such as smartphones and tablet computers. Android was developed by the&nbsp;<em>Open Handset Alliance</em>, led by Google, and other companies.</p><p>Android offers a unified approach to application development for mobile devices which means developers need only develop for Android, and their applications should be able to run on different devices powered by Android.</p><p>The first beta version of the Android Software Development Kit (SDK) was released by Google in 2007 where as the first commercial version, Android 1.0, was released in September 2008.</p><p><strong>Why Android ?</strong></p><ul><li>Open Source</li><li>Larger Developer and Community Reach</li><li>Increased Marketing</li><li>Inter App Integration</li><li>Reduce Cost of Development</li><li>Higher Success Ratio</li><li>Rich Development Environment</li></ul><p><strong>Features of Android:</strong></p><ul><li>Beautiful UI:&nbsp;<ul><li>Android OS basic screen provides a beautiful and intuitive user interface.</li></ul></li><li>Connectivity<ul><li>GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE, NFC and WiMAX.</li></ul></li><li>Storage<ul><li>SQLite, a lightweight relational database, is used for data storage purposes. Other are Realm, File storage etc.</li></ul></li><li>Media support<ul><li>H.263, H.264, MPEG-4 SP, AMR, AMR-WB, AAC, HE-AAC, AAC 5.1, MP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, and BMP.</li></ul></li><li>Messaging<ul><li>SMS and MMS</li></ul></li><li>Web browser<ul><li>Based on the open-source WebKit layout engine, coupled with Chrome&#39;s V8 JavaScript engine supporting HTML5 and CSS3.</li></ul></li><li>Multi-touch<ul><li>Android has native support for multi-touch which was initially made available in handsets such as the HTC Hero.</li></ul></li><li>Multi-tasking<span style='display:none'>&nbsp;</span><span style='display:none'>&nbsp;</span><span style='display:none'>&nbsp;</span><span style='display:none'>&nbsp;</span><span style='display:none'>&nbsp;</span><ul><li>User can jump from one task to another and same time various application can run simultaneously.</li></ul></li><li><span style='display:none'>&nbsp;</span>Resizable widgets<span style='display:none'>&nbsp;</span><span style='display:none'>&nbsp;</span><ul><li>Widgets are resizable, so users can expand them to show more content or shrink them to save space.</li></ul></li><li>Multi-Language<ul><li>Supports single direction and bi-directional text.</li></ul></li></ul>"
	}, {
		"id": 2,
		"category": "android",
		"subType": "android",
		"question": "Who is the founder of Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Andy Rubin."
	}, {
		"id": 3,
		"category": "android",
		"subType": "android",
		"question": "Explain the Android application Architecture.",
		"referenceLink": "https://www.geeksforgeeks.org/android-architecture/",
		"answer": "<h5><strong>Android Architecture</strong></h5><p>Android architecture contains different number of components to support any android device needs. Android software contains an open-source Linux Kernel having collection of number of C/C++ libraries which are exposed through an application framework services.</p><p>Among all the components Linux Kernel provides main functionality of operating system functions to smartphones and Dalvik Virtual Machine (DVM) provide platform for running an android application.</p><p>The main components of android architecture are following:-</p><ul><li>Applications</li><li>Application Frameworks</li><li>Android Runtime</li><li>Platform Libraries</li><li>Linux Kernel</li></ul><p><strong>Applications:</strong></p><p>Application is the top layer of android architecture. The pre-installed applications like home, contacts, camera, gallery etc and third party applications downloaded from the play store like chat applications, games etc. will be installed on this layer only.</p><p>It runs within the Android run time with the help of the classes and services provided by the application framework.</p><p>&nbsp;</p><p><strong>Application Frameworks:</strong></p><p>Application Framework provides several important classes which are used to create an Android application. It provides a generic abstraction for hardware access and also helps in managing the user interface with application resources. Generally, it provides the services with the help of which we can create a particular class and make that class helpful for the Applications creation.</p><p>It includes different types of services <strong>activity manager, notification manager, view system, package manager</strong> etc. which are helpful for the development of our application according to the prerequisite.</p><p>&nbsp;</p><p><strong>Android Runtime:</strong></p><p>Android Runtime environment is one of the most important part of Android. It contains components like core libraries and the Dalvik virtual machine(DVM). Mainly, it provides the base for the application framework and powers our application with the help of the core libraries.</p><p>Like Java Virtual Machine (JVM),&nbsp;<strong>Dalvik Virtual Machine (DVM)</strong>&nbsp;is a register-based virtual machine and specially designed and optimized for android to ensure that a device can run multiple instances efficiently. It depends on the layer Linux kernel for threading and low-level memory management. The core libraries enable us to implement android applications using the standard JAVA or Kotlin programming languages.</p><p>&nbsp;</p><p><strong>Platform Libraries:</strong></p><p>The Platform Libraries includes various C/C++ core libraries and Java based libraries such as Media, Graphics, Surface Manager, OpenGL etc. to provide a support for android development.</p><ul><li><strong>Media</strong>&nbsp;library provides support to play and record an audio and video formats.</li><li><strong>Surface manager</strong>&nbsp;responsible for managing access to the display subsystem.</li><li><strong>SGL</strong>&nbsp;and&nbsp;<strong>OpenGL</strong>&nbsp;both cross-language, cross-platform application program interface (API) are used for 2D and 3D computer graphics.</li><li><strong>SQLite</strong>&nbsp;provides database support and&nbsp;<strong>FreeType</strong>&nbsp;provides font support.</li><li><strong>Web-Kit</strong>&nbsp;This open source web browser engine provides all the functionality to display web content and to simplify page loading.</li><li><strong>SSL (Secure Sockets Layer)</strong>&nbsp;is security technology to establish an encrypted link between a web server and a web browser.</li></ul><p>&nbsp;</p><p><strong>Linux Kernel:</strong></p><p>Linux Kernel is the last layer of android architecture and also is&nbsp;heart of the android architecture. It manages all the available drivers such as display drivers, camera drivers, Bluetooth drivers, audio drivers, memory drivers, etc. which are required during the runtime.</p><p>The Linux Kernel will provide an abstraction layer between the device hardware and the other components of android architecture. It is responsible for management of memory, power, devices etc.</p><p>The features of Linux kernel are:</p><ul><li><strong>Security:</strong>&nbsp;The Linux kernel handles the security between the application and the system.</li><li><strong>Memory Management:</strong>&nbsp;It efficiently handles the memory management thereby providing the freedom to develop our apps.</li><li><strong>Process Management:</strong>&nbsp;It manages the process well, allocates resources to processes whenever they need them.</li><li><strong>Network Stack:</strong>&nbsp;It effectively handles the network communication.</li><li><strong>Driver Model:</strong>&nbsp;It ensures that the application works properly on the device and hardware manufacturers responsible for building their drivers into the Linux build.</li></ul>"
	}, {
		"id": 4,
		"category": "android",
		"subType": "android",
		"question": "What are the code names of android?",
		"answer": "<ul><li>Aestro</li><li>Blender</li><li>Cupcake</li><li>Donut</li><li>Eclair</li><li>Froyo</li><li>Gingerbread</li><li>Honeycomb</li><li>Ice Cream Sandwich</li><li>Jelly Bean</li><li>KitKat</li><li>Lollipop</li><li>Marshmallow</li><li>Nougat</li><li>Oreo</li><li>Pie</li></ul>",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions"
	}, {
		"id": 5,
		"category": "android",
		"subType": "android",
		"question": "What are the advantages of Android?",
		"referenceLink": "https://www.digitalaptech.com/advantages-and-disadvantages-of-google-android/",
		"answer": "<ul><li><h5><strong>Android is an open-source platform allowing UI customization</strong></h5><ul><li>Licensed under Apache, Android is an open source operating system whose codes developers can change to build customized User Interface. App developers building applications for this platform can get access to the core codes and are at a liberty to change the them to get the customized outcomes. This is not possible when it comes to iOS and app have to strictly adhere to the core code specifications when developing apps for the specific platform.</li></ul></li><li><h5><strong>Continual improvement &amp; removal of old features</strong></h5><ul><li>Google Android is supported by a huge community of developers and also users who continue to give feedback about the features, their pros and cons. As a result, there is continuous check on the codes and features, making modifications and alterations, bringing in better upgrades all the time. This is one of the reasons why Android is always adding new features while removing older ones that users do not like.</li></ul></li><li><h5><strong>Supports running multiple apps simultaneously</strong></h5><ul><li>With Android running on a device with good hardware specification, as a user you can have multiple apps running simultaneously. You can continue to listen to music as you check your messages or download files that you&rsquo;ve received or even upload them from your device or drive.</li></ul></li><li><h5><strong>Expandable memory &amp; runs on affordable large devices</strong></h5><ul><li>One of the biggest advantages of using devices running on Android platform is that it supports expandable memory. iOS devices on the other hand do not support external memory expansion by adding memory card to the phone. Users of this platform enjoy the privilege of storing e-books, music, videos and games on their devices.</li></ul></li><li><h5><strong>Affordable Development</strong></h5><ul><li>You can easily get your own app out in the android market and you don&rsquo;t need to pay big development fees. The application environments are free of charge and you can save a lot of money and there is no limit which means that if you want to make more than one app, you can do that without any problems.</li></ul></li><li><h5><strong>More</strong></h5><ul><li><h5><a href='http://www.credosystemz.com/training-in-chennai/best-android-training-in-chennai/' rel='noopener ugc nofollow' target='_blank'>Android&nbsp;</a>Is More Customizable Can change almost anything.</h5></li><li><h5>In Android, any new publication can be done easily and without any review process</h5></li><li><h5>Use a Different Messaging App for SMS</h5></li><li><h5>Android Offers an Open Platform</h5></li><li><h5>Easy access to the Android App Market</h5></li><li><h5>Cost Effective</h5></li><li><h5>Upcoming versions have a support to save RAW images</h5></li><li><h5>Built in Beta Testing and staged rollout</h5></li></ul></li></ul>"
	}, {
		"id": 6,
		"category": "android",
		"subType": "android",
		"question": "Does android support other languages than java?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Yes, an android app can be developed in C/C++ also using android NDK (Native Development Kit). It makes the performance faster. It should be used with Android SDK."
	}, {
		"id": 7,
		"category": "android",
		"subType": "android",
		"question": "What are the core building blocks of android?",
		"referenceLink": "https://www.w3schools.blog/android-core-building-blocks",
		"answer": "<h5><strong>The core building blocks or fundamental components of android are:</strong></h5><h5><strong>Activity:</strong></h5><p>Being similar to a Frame in AWT, an activity as a class represents a single screen. It is a core building block, i.e., the fundamental component of android.</p><h5><strong>View:</strong></h5><p>The UI element including button, label, text field, etc, and anything that one can see is a view.</p><h5><strong>Intent:</strong></h5><p>Along with invoking the components, the Intent is used for many purposes including:</p><ul><li>Start the service</li><li>Launch an activity</li><li>Display a web page</li><li>Display a list of contacts</li><li>Broadcast a message</li><li>Dial a phone call etc.<ul><li><strong>Example: To view the webpage:</strong></li></ul></li></ul><blockquote><pre><br><strong>Intent intent = new Intent(Intent.ACTION_VIEW);<br>intent.setData(Uri.parse('http://www.example.com'));<br>startActivity(intent);</strong></pre></blockquote><p style='margin-left:40px'><strong>Types of Intent:&nbsp;</strong></p><ol><li style='margin-left: 40px;'><strong>Implicit Intent</strong></li><li style='margin-left: 40px;'><strong>Explicit Intent</strong></li></ol><h5><strong>Service:</strong></h5><p>The component of android which is used to run the long running tasks into the background. The service don&#39;t have any UI</p><p style='margin-left:40px'><strong>Types of Services:&nbsp;</strong></p><ol><li><strong>Background Services</strong></li><li><strong>Foreground Services</strong></li><li><strong>Bound Services</strong></li></ol><h5><strong>Content Provider:</strong></h5><p>Use to share the data between the applications.</p><h5><strong>Fragment:</strong></h5><p>Being a part of an activity, one or more fragments can be displayed on the screen at the same time by the activity. It have it&#39;s own UI and lifecycle.</p><h5><strong>AndroidManifest.xml:</strong></h5><p>Information about activities, content providers, permissions, etc is in the AndroidManifest.xml which is like the web.xml file in Java EE."
	}, {
		"id": 8,
		"category": "android",
		"subType": "android",
		"question": "What is activity in Android?",
		"referenceLink": "https://developer.android.com/reference/android/app/Activity",
		"answer": "<p><strong>An activity</strong> is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with&nbsp;<code><a href='https://developer.android.com/reference/android/app/Activity#setContentView(android.view.View)'>setContentView(View)</a></code>. While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with&nbsp;<code><a href='https://developer.android.com/reference/android/R.attr#windowIsFloating'>R.attr.windowIsFloating</a></code>&nbsp;set),&nbsp;<a href='https://developer.android.com/guide/topics/ui/multi-window'>Multi-Window mode</a>&nbsp;or embedded into other windows. There are two methods almost all subclasses of Activity will implement:</p><ul><li><code><a href='https://developer.android.com/reference/android/app/Activity#onCreate(android.os.Bundle)'>onCreate(Bundle)</a></code>&nbsp;is where you initialize your activity. Most importantly, here you will usually call&nbsp;<code><a href='https://developer.android.com/reference/android/app/Activity#setContentView(int)'>setContentView(int)</a></code>&nbsp;with a layout resource defining your UI, and using&nbsp;<code><a href='https://developer.android.com/reference/android/app/Activity#findViewById(int)'>findViewById(int)</a></code>&nbsp;to retrieve the widgets in that UI that you need to interact with programmatically.</li><li><code><a href='https://developer.android.com/reference/android/app/Activity#onPause()'>onPause()</a></code>&nbsp;is where you deal with the user pausing active interaction with the activity. Any changes made by the user should at this point be committed (usually to the&nbsp;<code><a href='https://developer.android.com/reference/android/content/ContentProvider'>ContentProvider</a></code>&nbsp;holding the data). In this state the activity is still visible on screen.</li></ul><h5><strong>Activity Lifecycle</strong></h5><p>Activities in the system are managed as&nbsp;<a href='https://developer.android.com/guide/components/activities/tasks-and-back-stack'>activity stacks</a>. When a new activity is started, it is usually placed on the top of the current stack and becomes the running activity -- the previous activity always remains below it in the stack, and will not come to the foreground again until the new activity exits. There can be one or multiple activity stacks visible on screen.</p><p>An activity has essentially four states:</p><ul><li>If an activity is in the foreground of the screen (at the highest position of the topmost stack), it is&nbsp;<strong><em>active</em>&nbsp;or&nbsp;<em>running</em></strong>. This is usually the activity that the user is currently interacting with.</li><li>If an activity has lost focus but is still presented to the user, it is&nbsp;<strong><em>visible</em></strong>. It is possible if a new non-full-sized or transparent activity has focus on top of your activity, another activity has higher position in multi-window mode, or the activity itself is not focusable in current windowing mode. Such activity is completely alive (it maintains all state and member information and remains attached to the window manager).</li><li>If an activity is completely obscured by another activity, it is&nbsp;<strong><em>stopped</em>&nbsp;or&nbsp;<em>hidden</em></strong>. It still retains all state and member information, however, it is no longer visible to the user so its window is hidden and it will often be killed by the system when memory is needed elsewhere.</li><li>The system can drop the activity from memory by either asking it to finish, or simply killing its process, making it&nbsp;<strong><em>destroyed</em></strong>. When it is displayed again to the user, it must be completely restarted and restored to its previous state.</li></ul>"
	}, {
		"id": 9,
		"category": "android",
		"subType": "android",
		"question": "What are the life cycle methods of android activity?",
		"referenceLink": "https://developer.android.com/reference/android/app/Activity#ActivityLifecycle",
		"answer": "<p>There are 7 life-cycle methods of activity. They are as follows:</p><ol><li><p><a href='https://developer.android.com/reference/android/app/Activity#onCreate(android.os.Bundle)'>onCreate()</a></p><p style='margin-left:40px'>Called when the activity is first created. This is where you should do all of your normal static set up: create views, bind data to lists, etc. This method also provides you with a Bundle containing the activity&#39;s previously frozen state, if there was one.</p><p style='margin-left:40px'>Always followed by&nbsp;<code>onStart()</code>.</p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onStart()'>onStart()</a></p><p style='margin-left:40px'>Called when the activity is becoming visible to the user. Followed by&nbsp;<code>onResume()</code>&nbsp;if the activity comes to the foreground, or&nbsp;<code>onStop()</code>&nbsp;if it becomes hidden.</p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onRestart()'>onRestart()</a></p><p style='margin-left:40px'>Called after your activity has been stopped, prior to it being started again. Always followed by&nbsp;<code>onStart()</code></p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onResume()'>onResume()</a></p><p style='margin-left:40px'>Called when the activity will start interacting with the user. At this point your activity is at the top of its activity stack, with user input going to it. Always followed by&nbsp;<code>onPause()</code>.</p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onPause()'>onPause()</a></p><p style='margin-left:40px'>Called when the activity loses foreground state, is no longer focusable or before transition to stopped/hidden or destroyed state. The activity is still visible to user, so it&#39;s recommended to keep it visually active and continue updating the UI. Implementations of this method must be very quick because the next activity will not be resumed until this method returns. Followed by either&nbsp;<code>onResume()</code>&nbsp;if the activity returns back to the front, or&nbsp;<code>onStop()</code>&nbsp;if it becomes invisible to the user.</p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onStop()'>onStop()</a></p><p style='margin-left:40px'>Called when the activity is no longer visible to the user. This may happen either because a new activity is being started on top, an existing one is being brought in front of this one, or this one is being destroyed. This is typically used to stop animations and refreshing the UI, etc. Followed by either&nbsp;<code>onRestart()</code>&nbsp;if this activity is coming back to interact with the user, or&nbsp;<code>onDestroy()</code>&nbsp;if this activity is going away.</p></li><li><p><a href='https://developer.android.com/reference/android/app/Activity#onDestroy()'>onDestroy()</a></p><p style='margin-left:40px'>The final call you receive before your activity is destroyed. This can happen either because the activity is finishing (someone called&nbsp;<code><a href='https://developer.android.com/reference/android/app/Activity#finish()'>Activity#finish</a></code>&nbsp;on it), or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the&nbsp;<code><a href='https://developer.android.com/reference/android/app/Activity#isFinishing()'>isFinishing()</a></code>&nbsp;method.</p></li></ol>"
	}, {
		"id": 10,
		"category": "android",
		"subType": "android",
		"question": "What is intent?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "It is a kind of message or information that is passed to the components. It is used to launch an activity, display a web page, send SMS, send email, etc. There are two types of intents in android:<br><br>1. Implicit Intent<br>2. Explicit Intent"
	}, {
		"id": 11,
		"category": "android",
		"subType": "android",
		"question": "How are view elements identified in the android program?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "View elements can be identified using the keyword findViewById. But with view binding and data binding we can access them directly by id."
	}, {
		"id": 12,
		"category": "android",
		"subType": "android",
		"question": "Define Android toast.",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "An android toast provides feedback to the users about the operation being performed by them. It displays the message regarding the status of operation initiated by the user."
	}, {
		"id": 13,
		"category": "android",
		"subType": "android",
		"question": "Give a list of impotent folders in android",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "The following folders are declared as impotent in android:<br><br>AndroidManifest.xml<br>build.xml<br>bin/<br>src/<br>res/<br>assets/"
	}, {
		"id": 14,
		"category": "android",
		"subType": "android",
		"question": "Explain the use of 'bundle' in android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "We use bundles to pass the required data to various subfolders."
	}, {
		"id": 15,
		"category": "android",
		"subType": "android",
		"question": "What is an application resource file?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "The files which can be injected for the building up of a process are called as application resource file."
	}, {
		"id": 16,
		"category": "android",
		"subType": "android",
		"question": "How are layouts placed in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Layouts in Android are placed as XML files."
	}, {
		"id": 17,
		"category": "android",
		"subType": "android",
		"question": "Where are layouts placed in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Layouts in Android are placed in the layout folder."
	}, {
		"id": 18,
		"category": "android",
		"subType": "android",
		"question": "What is the implicit intent in android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "The Implicit intent is used to invoke the system components."
	}, {
		"id": 19,
		"category": "android",
		"subType": "android",
		"question": "What is explicit intent in android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "An explicit intent is used to invoke the activity class."
	}, {
		"id": 20,
		"category": "android",
		"subType": "android",
		"question": "How to call another activity in android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Intent i = new Intent(getApplicationContext(), ActivityTwo.class);   <br>startActivity(i);"
	}, {
		"id": 21,
		"category": "android",
		"subType": "android",
		"question": "What is service in android?",
		"referenceLink": "https://www.geeksforgeeks.org/services-in-android-with-example/",
		"answer": "<p><strong>Services </strong>in&nbsp;<a href='https://www.geeksforgeeks.org/introduction-to-android-development/'>Android</a>&nbsp;are a special component that facilitates an application to run in the background in order to perform long-running operation tasks. The prime aim of a service is to ensure that the application remains active in the background so that the user can operate multiple applications at the same time. A user-interface is not desirable for android services as it is designed to operate long-running processes without any user intervention. A service can run continuously in the background even if the application is closed or the user switches to another application.</p><p>There is a major difference between android services and threads, one must not be confused between the two. Thread is a feature provided by the Operating system to allow the user to perform operations in the background. While service is an&nbsp;<a href='https://www.geeksforgeeks.org/components-android-application/'>android component</a>&nbsp;that performs a long-running operation about which the user might not be aware of as it does not have UI.</p><h5><strong>Types of Android Services:</strong></h5><ol><li><p><strong>&nbsp;Foreground Services:</strong></p><p>Services that notify the user about its ongoing operations are termed as Foreground Services. Users can interact with the service by the notifications provided about the ongoing task. Such as in downloading a file, the user can keep track of the progress in downloading and can also pause and resume the process.</p></li><li><p><strong>Background Services:</strong></p><p>Background services do not require any user intervention. These services do not notify the user about ongoing background tasks and users also cannot access them. The process like schedule syncing of data or storing of data fall under this service.</p></li><li><p><strong>&nbsp;Bound Services:</strong></p><p>This type of android service allows the components of the application like activity to bound themselves with it. Bound services perform their task as long as any application component is bound to it. More than one component is allowed to bind themselves with a service at a time. In order to bind an application component with a service&nbsp;<strong>bindService()</strong>&nbsp;method is used.&nbsp;</p></li></ol><h5><strong>The Life Cycle of Android Services:</strong></h5><p>In android, services have 2 possible paths to complete its life cycle namely&nbsp;<strong>Started and Bounded</strong>.</p><h5>1. Started Service (Unbounded Service):</h5><p>By following this path, a service will initiate when an application component calls the&nbsp;<strong>startService()</strong>&nbsp;method. Once initiated, the service can run continuously in the background even if the component is destroyed which was responsible for the start of the service. Two option are available to stop the execution of service:</p><ul><li>By calling&nbsp;<strong>stopService()</strong>&nbsp;method,</li><li>The service can stop itself by using&nbsp;<strong>stopSelf()</strong>&nbsp;method.</li></ul><h5>2. Bounded Service:</h5><p>It can be treated as a server in a client-server interface. By following this path, android application components can send requests to the service and can fetch results. A service is termed as bounded when an application component binds itself with a service by calling&nbsp;<strong>bindService()</strong>&nbsp;method. To stop the execution of this service, all the components must unbind themselves from the service by using&nbsp;<strong>unbindService()&nbsp;</strong>method.</p><blockquote><p>To carry out a downloading task in the background, the&nbsp;<strong>startService()</strong>&nbsp;method will be called. Whereas to get information regarding the download progress and to pause or resume the process while the application is still in the background,&nbsp;<strong>the service must be bounded with a component</strong>&nbsp;which can perform these tasks.</p></blockquote><p>A user-defined service can be created through a normal class which is extending the&nbsp;<strong>class Service</strong>. Further, to carry out the operations of service on applications, there are certain callback methods which are needed to be&nbsp;<strong>overridden</strong>. The following are some of the important methods of Android Services:</p><ol><li>onStartCommand()<ul><li>The Android service calls this method when a component(eg: activity)&nbsp;requests to start a service using startService(). Once the service is started,it can be stopped explicitly using stopService() or stopSelf() methods.</li></ul></li><li>onBind()<ul><li>This method is mandatory to implement in android service and is invoked. Whenever an application component calls the bindService() method in order to bind itself with a service. User-interface is also provided to communicate, with the service effectively by returning an IBinder object.&nbsp;If the binding of service is not required then the method must return null.</li></ul></li><li>onUnbind()<ul><li><p>The Android system invokes this method when all the clients&nbsp;get disconnected from a particular service interface.</p></li></ul></li><li>onRebind()<ul><li><p>Once all clients are disconnected from the particular interface of service and there is a need to connect the service with new clients, the system calls this method.</p></li></ul></li><li>onCreate()<ul><li><p>Whenever a service is created either using onStartCommand() or onBind(), the android system calls this method. This method is necessary to perform&nbsp;a one-time-set-up.</p></li></ul></li><li>onDestroy()<ul><li><p>When a service is no longer in use, the system invokes this method&nbsp;just before the service destroys as a final clean up call. Services must&nbsp;implement this method in order to clean up resources like registered listeners,&nbsp;threads, receivers, etc.</p></li></ul></li></ol>"
	}, {
		"id": 22,
		"category": "android",
		"subType": "android",
		"question": "What is the name of the database used in android?",
		"referenceLink": "https://www.javatpoint.com/android-sqlite-tutorial",
		"answer": "<strong>SQLite:</strong> An opensource and lightweight relational database for mobile devices."
	}, {
		"id": 23,
		"category": "android",
		"subType": "android",
		"question": "What is AAPT?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "AAPT is an acronym for android asset packaging tool. It handles the packaging process."
	}, {
		"id": 24,
		"category": "android",
		"subType": "android",
		"question": "What is a content provider?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "A content provider is used to share information between Android applications."
	}, {
		"id": 25,
		"category": "android",
		"subType": "android",
		"question": "What is fragment?",
		"referenceLink": "https://developer.android.com/guide/fragments",
		"answer": "A Fragment represents a reusable portion of your app's UI. A fragment defines and manages its own layout, has its own lifecycle, and can handle its own input events. Fragments cannot live on their own--they must be hosted by an activity or another fragment."
	}, {
		"id": 26,
		"category": "android",
		"subType": "android",
		"question": "What is ADB?",
		"referenceLink": "https://developer.android.com/studio/command-line/adb",
		"answer": "ADB stands for Android Debug Bridge. It is a versatile command-line tool that lets you communicate with a device. The adb command facilitates a variety of device actions, such as installing and debugging apps, and it provides access to a Unix shell that you can use to run a variety of commands on a device."
	}, {
		"id": 27,
		"category": "android",
		"subType": "android",
		"question": "What is the Google Android SDK?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "The Google Android SDK is a toolset which is used by developers to write apps on Android-enabled devices. It contains a graphical interface that emulates an Android-driven handheld environment and allows them to test and debug their codes."
	}, {
		"id": 28,
		"category": "android",
		"subType": "android",
		"question": "Name the dialog box which is supported by Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Alert Dialog<br>Progress Dialog<br>Date Picker Dialog<br>Time picker Dialog"
	}, {
		"id": 29,
		"category": "android",
		"subType": "android",
		"question": "Define Android Architecture",
		"referenceLink": "https://www.geeksforgeeks.org/android-architecture/",
		"answer": "Android architecture contains different number of components to support any android device needs. Android software contains an open-source Linux Kernel having collection of number of C/C++ libraries which are exposed through an application framework services.<br><br>The main components of android architecture are following:-<br><br>Applications<br>Application Framework<br>Android Runtime<br>Platform Libraries<br>Linux Kernel"
	}, {
		"id": 30,
		"category": "android",
		"subType": "android",
		"question": "What do you mean by a drawable folder in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "In Android, a drawable folder is compiled a visual resource that can use as a background, banners, icons, splash screen, etc."
	}, {
		"id": 31,
		"category": "android",
		"subType": "android",
		"question": "What is a singleton class in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "A singleton class is a class which can create only an object that can be shared by all other classes."
	}, {
		"id": 32,
		"category": "android",
		"subType": "android",
		"question": "What is application Widgets in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Application widgets are miniature application views that can be embedded in other applications and receive periodic updates."
	}, {
		"id": 33,
		"category": "android",
		"subType": "android",
		"question": "What is nine-patch images tool in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "We can change bitmap images into nine sections with four corners, four edges, and an axis."
	}, {
		"id": 34,
		"category": "android",
		"subType": "android",
		"question": "What is ADT in Android?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "ADT stands for Android Development Tool. It is used to develop the applications and test the applications."
	}, {
		"id": 35,
		"category": "android",
		"subType": "android",
		"question": "Describe the Android Framework",
		"referenceLink": "",
		"answer": "The Android Framework is an important aspect of the Android Architecture. Here you can find all the classes and methods that developers would need in order to write applications on the Android environment."
	}, {
		"id": 36,
		"category": "android",
		"subType": "android",
		"question": "Differentiate Activities from Services",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "Activities can be closed, or terminated anytime the user wishes. On the other hand, services are designed to run behind the scenes, and can act independently. Most services run continuously, regardless of whether there are certain or no activities being executed."
	}, {
		"id": 37,
		"category": "android",
		"subType": "android",
		"question": "What is Cold Start?",
		"referenceLink": "https://developer.android.com/topic/performance/vitals/launch-time#cold",
		"answer": "A cold start refers to an app’s starting from scratch: the system’s process has not, until this start, created the app’s process. Cold starts happen in cases such as your app’s being launched for the first time since the device booted, or since the system killed the app. This type of start presents the greatest challenge in terms of minimizing startup time, because the system and app have more work to do than in the other launch states.<br><br>At the beginning of a cold start, the system has three tasks. These tasks are:<br><br>1. Loading and launching the app.<br>2. Displaying a blank starting window for the app immediately after launch.<br>3. Create the app process.<br><br>As soon as the system creates the app process, the app process is responsible for the next stages:<br><br>1. Creating the app object.<br>2. Launching the main thread.<br>3. Creating the main activity.<br>4. Inflating views.<br>5. Laying out the screen.<br>6. Performing the initial draw."
	}, {
		"id": 38,
		"category": "android",
		"subType": "android",
		"question": "What is Worm Start?",
		"referenceLink": "https://developer.android.com/topic/performance/vitals/launch-time#warm",
		"answer": "<p>A warm start encompasses some subset of the operations that take place during a cold start; at the same time, it represents more overhead than a hot start. There are many potential states that could be considered warm starts. For instance:</p><ul><li><p>The user backs out of your app, but then re-launches it. The process may have continued to run, but the app must recreate the activity from scratch via a call to&nbsp;<code>onCreate()</code>.</p></li><li><p>The system evicts your app from memory, and then the user re-launches it. The process and the activity need to be restarted, but the task can benefit somewhat from the saved instance state bundle passed into&nbsp;<code>onCreate()</code>.</p></li></ul>"
	}, {
		"id": 39,
		"category": "android",
		"subType": "android",
		"question": "What is Hot Start?",
		"referenceLink": "https://developer.android.com/topic/performance/vitals/launch-time#hot",
		"answer": "A hot start of your application is much simpler and lower-overhead than a cold start. In a hot start, all the system does is bring your activity to the foreground. If all of your application’s activities are still resident in memory, then the app can avoid having to repeat object initialization, layout inflation, and rendering."
	}, {
		"id": 40,
		"category": "android",
		"subType": "android",
		"question": "What is WebView?",
		"referenceLink": "https://www.tutorialspoint.com/android/android_webview_layout.htm",
		"answer": "WebView is a view that display web pages inside your application. You can also specify HTML string and can show it inside your application using WebView. WebView makes turns your application to a web application."
	}, {
		"id": 41,
		"category": "android",
		"subType": "android",
		"question": "Android Services.",
		"referenceLink": "https://www.geeksforgeeks.org/services-in-android-with-example/",
		"answer": "<p>Services in&nbsp;Android are a special component that facilitates an application to run in the background in order to perform long-running operation tasks. The prime aim of a service is to ensure that the application remains active in the background so that the user can operate multiple applications at the same time. A user-interface is not desirable for android services as it is designed to operate long-running processes without any user intervention. A service can run continuously in the background even if the application is closed or the user switches to another application.</p><p>&nbsp;</p><p>Types of <strong>Services:</strong></p><p>1. Foreground Services:&nbsp;Services that notify the user about its ongoing operations are termed as Foreground Services. Users can interact with the service by the notifications provided about the ongoing task. Such as in downloading a file, the user can keep track of the progress in downloading and can also pause and resume the process.</p><p>2. Background Services: Background services do not require any user intervention. These services do not notify the user about ongoing background tasks and users also cannot access them. The process like schedule syncing of data or storing of data fall under this service.</p><p>3. Bound Services:&nbsp;This type of android service allows the components of the application like activity to bound themselves with it. Bound services perform their task as long as any application component is bound to it. More than one component is allowed to bind themselves with a service at a time. In order to bind an application component with a service&nbsp;<strong>bindService()</strong>&nbsp;method is used.&nbsp;</p>"
	}, {
		"id": 42,
		"category": "android",
		"subType": "android",
		"question": "What is Broadcast Receivers?",
		"referenceLink": "https://www.geeksforgeeks.org/broadcast-receiver-in-android-with-example/",
		"answer": "<p><strong>Broadcast</strong> in android is the system-wide events that can occur when the device starts, when a message is received on the device or when incoming calls are received, or when a device goes to airplane mode, etc. Broadcast Receivers are used to respond to these system-wide events. <strong>Broadcast Receivers</strong> allow us to register for the system and application events, and when that event happens, then the register receivers get notified.</p><p>There are mainly two types of Broadcast Receivers:</p><ol><li>Static Broadcast Receivers: These types of Receivers are declared in the manifest file and works even if the app is closed.</li><li>Dynamic Broadcast Receivers: These types of receivers work only if the app is active or minimized. Since from API Level 26, most of the broadcast can only be caught by the dynamic receiver</li></ol><p>Public methods:</p><ul><li>&nbsp;public final void abortBroadcast ()</li><li>&nbsp;public final void clearAbortBroadcast ()</li><li>&nbsp;public final boolean getAbortBroadcast ()</li><li>&nbsp;public final boolean getDebugUnregister ()</li><li>&nbsp;public final int getResultCode ()</li><li>&nbsp;public final <a href='https://developer.android.com/reference/java/lang/String' style='white-space: pre-wrap;'>String</a><span style='white-space:pre-wrap'> getResultData ()</span></li><li><span style='white-space:pre-wrap'>&nbsp;</span>public final boolean isOrderedBroadcast ()</li><li>&nbsp;public abstract void onReceive (<a href='https://developer.android.com/reference/android/content/Context' style='white-space: pre-wrap;'>Context</a><span style='white-space:pre-wrap'> context, </span><a href='https://developer.android.com/reference/android/content/Intent' style='white-space: pre-wrap;'>Intent</a><span style='white-space:pre-wrap'> intent)</span></li></ul><p>&nbsp;</p><p>&nbsp;</p>"
	}, {
		"id": 43,
		"category": "android",
		"subType": "android",
		"question": "Whate is Intent Filter",
		"referenceLink": "https://developer.android.com/guide/topics/manifest/intent-filter-element",
		"answer": "Specifies the types of intents that an activity, service, or broadcast receiver can respond to. An intent filter declares the capabilities of its parent component — what an activity or service can do and what types of broadcasts a receiver can handle. It opens the component to receiving intents of the advertised type, while filtering out those that are not meaningful for the component.<br>Most of the contents of the filter are described by its <action>, <category>, and <data> subelements."
	}, {
		"id": 44,
		"category": "android",
		"subType": "android",
		"question": "What is ANR?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "<p>When the UI thread of an Android app is blocked for too long, an <strong>&quot;Application Not Responding&quot;</strong> (ANR) error is triggered. If the app is in the foreground, the system displays a dialog to the user. The ANR dialog gives the user the opportunity to force quit the app.</p><p><strong>ANRs</strong> are a problem because the app&rsquo;s main thread, which is responsible for updating the UI, can&rsquo;t process user input events or draw, causing frustration to the user.</p><p>&nbsp;</p><p>An ANR will be triggered for your app when one of the following conditions occur:</p><ul><li>While your activity is in the foreground, your app has not responded to an input event or BroadcastReceiver&nbsp;(such as key press or screen touch events) within 5 seconds.</li><li>While you do not have an activity in the foreground, your&nbsp;BroadcastReceiver hasn&#39;t finished executing within a considerable amount of time.</li></ul>"
	}, {
		"id": 45,
		"category": "android",
		"subType": "android",
		"question": "What is Contente Resolver",
		"referenceLink": "https://www.androiddesignpatterns.com/2012/06/content-resolvers-and-content-providers.html",
		"answer": "<p>The <strong>Content Resolver</strong> is the single, global instance in your application that provides access to your (and other applications&rsquo;) content providers. The Content Resolver behaves exactly as its name implies: it accepts requests from clients, and&nbsp;<em>resolves</em>&nbsp;these requests by directing them to the content provider with a distinct authority. To do this, the Content Resolver stores a mapping from authorities to <strong>Content Providers</strong>. This design is important, as it allows a simple and secure means of accessing other applications&rsquo; Content Providers.</p><p>The Content Resolver includes the <strong>CRUD</strong> (create, read, update, delete) methods corresponding to the abstract methods (insert, query, update, delete) in the Content Provider class. The Content Resolver does not know the implementation of the Content Providers it is interacting with (nor does it need to know); each method is passed an URI that specifies the Content Provider to interact with.</p>"
	}, {
		"id": 46,
		"category": "android",
		"subType": "android",
		"question": "What is Sticky Intent?",
		"referenceLink": "https://medium.com/@kotiyal.abhirocks/types-of-intent-in-android-8154ad218c20",
		"answer": "<p><strong>Sticky Intent:</strong>&nbsp;These are the Intents which sticks with Android for future broadcast listener.</p><p>Sticky Intent is also a type of Intent which allows communication between a function and a service sendStickyBroadcast(), performs a sendBroadcast(Intent) known as sticky, the&nbsp;<strong>Intent you are sending stays around after the broadcast is complete, so that others can quickly retrieve that data through the return value of registerReceiver(BroadcastReceiver, IntentFilter)</strong>. In all other ways, this behaves the same as sendBroadcast(Intent).</p><p>One example of a sticky broadcast sent via the operating system is ACTION_BATTERY_CHANGED. When you call registerReceiver() for that action &mdash; even with a null BroadcastReceiver &mdash; you get the Intent that was last Broadcast for that action. Hence, you can use this to find the state of the battery without necessarily registering for all future state changes in the battery.</p>"
	}, {
		"id": 47,
		"category": "android",
		"subType": "android",
		"question": "Constraint Layout vs Relative Layout",
		"referenceLink": "https://tutorial.eyehunts.com/android-interview-questions/differences-between-constraintlayout-relativelayout/",
		"answer": "<p><a href='https://developer.android.com/reference/android/support/constraint/ConstraintLayout' rel='noopener noreferrer' target='_blank'>ConstraintLayout</a>&nbsp;has&nbsp;<strong>flat view hierarchy</strong>&nbsp;unlike other layouts, so does&nbsp;<strong>a better performance than relative layout</strong>. Yes, this is the biggest advantage of Constraint Layout, the only single layout can handle your UI. Where in the Relative layout you needed multiple nested layouts (<a href='https://tutorial.eyehunts.com/android/android-linearlayout-tutorial-example-android-kotlin/' rel='noopener noreferrer' target='_blank'>LinearLayout</a>&nbsp;+<a href='https://tutorial.eyehunts.com/android/android-relativelayout-tutorial-example-kotlin/' rel='noopener noreferrer' target='_blank'>&nbsp;RelativeLayout</a>).</p><p>&nbsp;</p><p><strong>1. Does the ConstraintLayout have better performance than a nested Layout?</strong></p><p>&nbsp;</p><p>&nbsp;</p><p>Yes,&nbsp;<code>ConstraintLayout</code>&nbsp;has designed with performance optimization in mind, more effective, easy use, and trying to eliminate as many pass scenarios as possible. This is done by eliminating the deeply-nested view hierarchies with flat view&nbsp;hierarchies.</p><p><strong>2. Can we replace&nbsp;RelativeLayout&nbsp;with&nbsp;ConstraintLayout completly?</strong></p><p>Yes, you can completely replace RelativeLayout with ConstraintLayout.&nbsp;<code>ConstraintLayout</code>&nbsp;does all that&nbsp;<code>RelativeLayout</code>&nbsp;does, and more.</p><p><strong>3. Do&nbsp;we don&rsquo;t need to write many dimens.xml for all screen resolution to have a responsive app?</strong></p><p>It depends on what you want to do &ndash; using dimensions might still be useful, for example- &nbsp;you might want the same layout but with different margins for different sizes of devices. That time you have to add many dimen.xml resource files.</p>"
	}, {
		"id": 48,
		"category": "android",
		"subType": "android",
		"question": "What is Proguard in Android?",
		"referenceLink": "https://www.geeksforgeeks.org/proguard-in-android/",
		"answer": "<p>Proguard is a great tool for creating a production-ready application in Android. It assists us in reducing code and making apps faster. Proguard is included by default in Android Studio and can help in a variety of ways, a few of which are listed below.</p><ol><li>It obfuscates the code, which means that it changes the names to something smaller, such as A for MainViewModel. After obfuscating the app, reverse engineering becomes difficult.</li><li>It shrinks the resources, ignoring resources that are not called by our Class files, are not used in our Android app, such as images from drawable, and so on. This will significantly reduce the app&rsquo;s size. To keep your app light and fast, you should always shrink it.</li></ol>"
	}, {
		"id": 49,
		"category": "android",
		"subType": "android",
		"question": "What is Multidex in Android?",
		"referenceLink": "https://blog.mindorks.com/understanding-multidex-in-android",
		"answer": "<p>In Android, the compilers convert your source code into DEX files. This DEX file contains the compiled code used to run the app. But there is a limitation with the DEX file. The DEX file limits the total number of methods that can be referenced within a single DEX file to 64K i.e. 65,536 methods. So, you can&#39;t use more than 64K methods in a particular DEX file. These 64K methods include Android framework methods, library methods, and methods in our code also. This limit of 64K is referred to as the &quot;<strong>64K reference limit</strong>&quot;.</p><p>&nbsp;</p><p>So, if our app exceeds 65,536 methods, we will encounter a build error that indicates our app has reached the limit of the Android build architecture. The error is as follows:</p><p>&nbsp;</p><blockquote><pre> <code>Too many field references: 131000; max is 65536. You may try using --multi-dex option.</code></pre></blockquote><p>&nbsp;</p><p>Older versions of the build system report a different error, which also indicates the same problem:</p><p>&nbsp;</p><blockquote><pre> <code>Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536</code></pre></blockquote><p>&nbsp;</p><p>&nbsp;</p><p>Both the above error are known as&nbsp;<strong>64K reference limit&nbsp;</strong>i.e we are trying to use more than 64K methods in our code. So, here comes the role of Multidex support in our Android Project.</p>"
	}, {
		"id": 50,
		"category": "android",
		"subType": "android",
		"question": "Android RecyclerView?",
		"referenceLink": "https://developer.android.com/develop/ui/views/layout/recyclerview",
		"answer": "<p>RecyclerView makes it easy to efficiently display large sets of data. You supply the data and define how each item looks, and the RecyclerView library dynamically creates the elements when they&#39;re needed.</p><p>As the name implies, RecyclerView&nbsp;<em>recycles</em>&nbsp;those individual elements. When an item scrolls off the screen, RecyclerView doesn&#39;t destroy its view. Instead, RecyclerView reuses the view for new items that have scrolled onscreen. This reuse vastly improves performance, improving your app&#39;s responsiveness and reducing power consumption.</p><p><strong>Note:</strong>&nbsp;Besides being the name of the class, RecyclerView is also the name of the library. In this page,&nbsp;<code>RecyclerView</code>&nbsp;in&nbsp;<code>code font</code>&nbsp;always means the class in the RecyclerView library.</p>"
	}, {
		"id": 51,
		"category": "android",
		"subType": "android",
		"question": "Android Listview?",
		"referenceLink": "https://www.geeksforgeeks.org/android-listview-in-java-with-example/",
		"answer": "<p>A <strong>ListView</strong> is a type of&nbsp;<a href='https://developer.android.com/reference/android/widget/AdapterView rel='noopener noreferrer nofollow' target='_blank'>AdapterView</a>&nbsp;that displays a vertical list of scroll-able views and each view is placed one below the other. Using adapter, items are inserted into the list from an array or database. For displaying the items in the list method&nbsp;<code><strong>setAdaptor()</strong></code>&nbsp;is used.&nbsp;<code><strong>setAdaptor()</strong></code>&nbsp;method conjoins an adapter with the list.</p><p>Android ListView is a ViewGroup that is used to display the list of items in multiple rows and contains an adapter that automatically inserts the items into the list.</p><p>The main purpose of the adapter is to fetch data from an array or database and insert each item that placed into the list for the desired result. So, it is the main source to pull data from strings.xml file which contains all the required strings in Java or XML files.</p>"
	}, {
		"id": 52,
		"category": "android",
		"subType": "android",
		"question": "What is Context on Android?",
		"referenceLink": "https://www.tutorialspoint.com/what-is-context-on-android",
		"answer": "it's the context of current state of the application/object. It lets newly-created objects understand what has been going on. Typically, you call it to get information regarding another part of your program (activity and package/application)."
	}, {
		"id": 53,
		"category": "android",
		"subType": "android",
		"question": "What are the permission protection levels in Android?",
		"referenceLink": "",
		"answer": "<ul><li><strong>Normal</strong>&nbsp;&mdash; A lower-risk permission that gives requesting applications access to isolated application-level features, with minimal risk to other applications, the system, or the user. The system automatically grants this type of permission to a requesting application at installation, without asking for the user&rsquo;s explicit approval.</li><li><strong>Dangerous</strong>&nbsp;&mdash; A higher-risk permission. Any dangerous permissions requested by an application may be displayed to the user and require confirmation before proceeding, or some other approach may be taken to avoid the user automatically allowing the use of such facilities.</li><li><strong>Signature</strong>&nbsp;&mdash; A permission that the system grants only if the requesting application is signed with the same certificate as the application that declared the permission. If the certificates match, the system automatically grants the permission without notifying the user or asking for the user&rsquo;s explicit approval.</li><li><strong>SignatureOrSystem</strong>&nbsp;&mdash; A permission that the system grants only to applications that are in the Android system image or that are signed with the same certificate as the application that declared the permission.</li></ul>"
	}, {
		"id": 54,
		"category": "android",
		"subType": "android",
		"question": "What is a JobScheduler?",
		"referenceLink": "https://developer.android.com/reference/android/app/job/JobScheduler",
		"answer": "<ul><li><p>The&nbsp;<strong>JobScheduler</strong>&nbsp;API performs an operation for your application when a set of predefined conditions are met (such as when a device is plugged into a power source or connected to a Wi-Fi network). This allows your app to perform the given task while being considerate of the device&#39;s battery at the cost of timing control.</p><p>Unlike the&nbsp;<strong>AlarmManager</strong>&nbsp;class, the timing isn&#39;t exact. Compared to a custom&nbsp;<strong>SyncAdapter</strong>&nbsp;or the&nbsp;<strong>AlarmManager</strong>, the JobScheduler supports batch scheduling of jobs. The Android system can combine jobs so that battery consumption is reduced. JobManager makes handling uploads easier as it handles automatically the unreliability of the network. It also survives application restarts. Here are example when you would use this job scheduler:</p></li><li>Tasks that should be done once the device is connect to a power supply</li><li>Tasks that require network access or a Wi-Fi connection.</li><li>Task that are not critical or user facing</li><li>Tasks that should be running on a regular basis as batch where the timing is not critical</li></ul>"
	}, {
		"id": 55,
		"category": "android",
		"subType": "android",
		"question": "What is the ViewHolder pattern? Why should we use it?",
		"referenceLink": "https://www.javatpoint.com/android-interview-questions",
		"answer": "<p>Every time when the adapter calls&nbsp;<code>getView()</code>&nbsp;method, the&nbsp;<code>findViewById()</code>&nbsp;method is also called. This is a very intensive work for the mobile CPU and so affects the performance of the application and the battery consumption increases.&nbsp;<strong>ViewHolder</strong>&nbsp;is a design pattern which can be applied as a way around repeated use of&nbsp;<code>findViewById()</code>.</p><p>A ViewHolder holds the reference to the id of the view resource and calls to the resource will not be required after you &quot;find&quot; them: Thus performance of the application increases.</p>"
	}, {
		"id": 56,
		"category": "android",
		"subType": "mvvm",
		"question": "What is Design Pattern?",
		"referenceLink": "https://blog.mindorks.com/mastering-design-patterns-in-android-with-kotlin",
		"answer": "<p>A <strong>Design Pattern</strong> is a general, reusable solution to a commonly occurring problem within a given context.</p><p>So, it is basically a pattern that can be followed to solve a particular feature. These are the best practices that can be used by any programmer to build an application.</p><p>In Android also, we use some Design Pattern that is used to make our code easier to understand and more reusable.</p><p>There are a number of Design Patterns that can be used in Software Development and all these can be classified into the following three categories:</p><ul><li>Creational Pattern</li><li>Structural Pattern</li><li>Behavioural Pattern</li></ul>"
	}, {
		"id": 57,
		"category": "android",
		"subType": "mvvm",
		"question": "What is MVVM?",
		"referenceLink": "https://www.geeksforgeeks.org/mvvm-model-view-viewmodel-architecture-pattern-in-android/",
		"answer": "<p><strong>Model &mdash; View &mdash; ViewModel (MVVM)</strong>&nbsp;is the industry-recognized software&nbsp;<a href='https://www.geeksforgeeks.org/android-architecture-patterns/'>architecture pattern</a>&nbsp;that overcomes all drawbacks of MVP and&nbsp;<a href='https://www.geeksforgeeks.org/mvc-model-view-controller-architecture-pattern-in-android-with-example/'>MVC</a>&nbsp;design patterns. MVVM suggests separating the data presentation logic(Views or UI) from the core business logic part of the application.&nbsp;</p><h5><strong>The separate code layers of MVVM are:</strong></h5><ul><li><strong>Model:</strong>&nbsp;This layer is responsible for the abstraction of the data sources. Model and ViewModel work together to get and save the data.</li><li><strong>View:</strong>&nbsp;The purpose of this layer is to inform the ViewModel about the user&rsquo;s action. This layer observes the ViewModel and does not contain any kind of application logic.</li><li><strong>ViewModel:</strong>&nbsp;It exposes those data streams which are relevant to the View. Moreover, it serves as a link between the Model and the View.</li></ul><p><strong>MVVM</strong> pattern has some similarities with the MVP(Model &mdash; View &mdash; Presenter) design pattern as the Presenter role is played by ViewModel. However, the drawbacks of the MVP pattern has been solved by MVVM in the following ways:</p><ol><li>ViewModel does not hold any kind of reference to the View.</li><li>Many to-1 relationships exist between View and ViewModel.</li><li>No triggering methods to update the View.</li></ol><h5><strong>Ways to Implement MVVM in the Project</strong></h5><p>There are 2 ways to implement MVVM design pattern in Android projects:</p><ol><li>Using the DataBinding library released by Google</li><li>Using any tool like RxJava for DataBinding.</li></ol>"
	}, {
		"id": 58,
		"category": "android",
		"subType": "android",
		"question": "What happens when we navigate from Activity A to Activity B?",
		"referenceLink": "https://victorbrandalise.com/android-lifecycle-scenarios-single-and-multi-activities/",
		"answer": "<h5>1. Navigate from Activity A to Activity B</h5><p>When activity A is created,&nbsp;<code>onCreate()</code>&nbsp;is called. Then&nbsp;<code>onStart()</code>&nbsp;is called. Once the user is able to interact with the app,&nbsp;<code>onResume()</code>&nbsp; is called. Now the user opens Activity B.</p><p><code>onPause()</code>&nbsp;of activity A will get called. Then activity B&rsquo;s&nbsp;<code>onCreate()</code><strong>&nbsp;</strong>followed by&nbsp;<code>onStart()</code>&nbsp;and&nbsp;<code>onResume()</code>. Finally activity A&rsquo;s&nbsp;<code>onStop()</code>&nbsp;is triggered.</p><p>Here is the callbacks order</p><p>Activity A -&gt;&nbsp;<code>onCreate()</code>&nbsp;,&nbsp;<code>onStart()</code>,&nbsp;<code>onResume()</code>, &lt;Activity B started&gt;,&nbsp;<code>onPause()</code></p><p>Activity B -&gt;&nbsp;<code>onCreate()</code>,&nbsp;<code>onStart()</code>,&nbsp;<code>onResume()</code></p><p>Activity A -&gt;&nbsp;<code>onStop()</code>,&nbsp;<code>onSaveInstanceState()</code></p><hr/><h5>2. Navigate from Activity B back to Activity A</h5><p>When the back button is pressed, Activity B&rsquo;s&nbsp;<code>onPause()</code>&nbsp;is triggered. Then activity A&rsquo;s&nbsp;<code>onRestart()</code>&nbsp;is called followed by&nbsp;<code>onStart()</code>&nbsp;and&nbsp;<code>onResume()</code>. After that activity B&rsquo;s&nbsp;<code>onStop()</code>&nbsp;gets called followed by&nbsp;<code>onDestroy()</code>.</p><p>Here is the callbacks order</p><p>Activity B -&gt; &lt;Back is pressed&gt;,&nbsp;<code>onPause()</code></p><p>Activity A -&gt;&nbsp;<code>onRestart()</code>,&nbsp;<code>onStart()</code>,&nbsp;<code>onResume()</code></p><p>Activity B -&gt;&nbsp;<code>onStop()</code>,&nbsp;<code>onDestroy()</code></p>"
	}, {
		"id": 59,
		"category": "android",
		"subType": "android",
		"question": "Differenc between Serializable and Parcelable",
		"referenceLink": "https://proandroiddev.com/serializable-or-parcelable-why-and-which-one-17b274f3d3bb",
		"answer": "<p>To transferring objects between Android components,&nbsp; use to convert it into <strong>Serializable or Parcelable</strong>, but why?</p><p><br/>When an application is in the background, its process may be killed by the OS in case of low memory. And by returning back the user to the app, the OS creates a new process for the application. Therefore, with passing an instance of the object to the Bundle, when the process is changed, the reference of the object won&rsquo;t be in the new process and it wouldn&rsquo;t be possible to use that object. Also, in the case of PendingIntents, if the owing application is killed, the PendingIntent itself will remain usable from other processes that have been given it.<br/>So,&nbsp;the OS instead of saving the reference of an object must save its values and it would be possible just by converting that object to the Parcelable or Serializable.</p><p>&nbsp;</p><h5><strong>Serializable Objects</strong></h5><p>Serializing objects means converting an object&rsquo;s state to a byte stream and deserializing means reverting back a byte stream into a copy of the object.</p><h5><strong>What are Serializable-Objects used for?</strong></h5><ul><li>&nbsp;Storing objects&rsquo; data into a file on disk.</li><li>&nbsp;In games, the state of the game can be stored into a file on disk by using Serializable.</li><li>&nbsp;Sending data over the network.</li><li>&nbsp;Transferring objects between different components in Android.</li></ul><h5><strong>How to create a Serializable object?</strong></h5><p>Creating a Serializable object is as simple as implementing the&nbsp;<strong>java.io.Serializable&nbsp;</strong>interface<strong>&nbsp;</strong>in your class (There are no methods to override).</p><p>&nbsp;</p><h5><strong>Parcelable</strong></h5><p>A&nbsp;<a href='https://developer.android.com/reference/kotlin/android/os/Parcel#marshall' rel='noopener ugc nofollow' target='_blank'>parcel</a>&nbsp;is highly optimized for local IPC (Inter-Process Communication &mdash; You can get familiar with IPC&nbsp;<a href='https://stackoverflow.com/a/5740396/3610737' rel='noopener ugc nofollow' target='_blank'>here</a>) also is not attempt to save data in any kind of persistent storage.</p><h5><strong>How to create a Parcelable object?</strong></h5><p>Creating a parcelable object is not as simple as creating a Serializable object. First of all the class must implement the&nbsp;<a href='https://developer.android.com/reference/android/os/Parcelable.html' rel='noopener ugc nofollow' target='_blank'>Parcelabel</a>&nbsp;interface and fill all its required methods, then, our class must have a non-null static field called CREATOR with the type of Parcelable.Creator.</p><p>&nbsp;</p><p>In comparison with Serializable, making a Parcelable object requires a lot of boilerplate code, especially for java developers. But in Serializable, reflection is used and through the process, many temporary objects will be created. Thus, much memory will be used. On the other side, Parcelable is faster and more optimized than Serialization because it&rsquo;s the developer&rsquo;s responsibility to build the parcel object, so there is no need to use reflection.<br/>But keep in mind that if you want to save an object in a file or save the state of your game into a file on the storage you still must use Serializable instead of Parcelable.</p><blockquote><p>Parcel is&nbsp;<strong>not</strong>&nbsp;a general-purpose serialization mechanism. This class (and the corresponding&nbsp;<code><a href='https://developer.android.com/reference/android/os/Parcelable' rel='noopener ugc nofollow' target='_blank'><strong><em>Parcelable</em></strong></a></code>&nbsp;API for placing arbitrary objects into a Parcel) is designed as a high-performance IPC transport. As such, it is not appropriate to place any Parcel data in to persistent storage: changes in the underlying implementation of any of the data in the Parcel can render older data unreadable.</p></blockquote><p>&nbsp;</p><h5><strong>Summary</strong></h5><p>In this article, we&rsquo;ve learned why and how to use Parcelable or Serializable objects in case of sending data between Android components. Below is a short summary of what we learned:</p><ol><li>&nbsp;Sending object references between Android components is not possible because by changing the process, the object references won&rsquo;t be in the new process, so we must make our objects Parcelabel or Serializable till the OS be able to save the values of the objects</li><li>&nbsp;We have two choices to transfer objects between Android components, that are making objects Parcelaber or Serializable</li><li>&nbsp;Unlike Serializable, <strong>in Parcelable reflection won&rsquo;t be used</strong> so it is <strong>faster </strong>and has <strong>better performance</strong></li><li>&nbsp;Android Parcelabe is not made to save objects into the files, so if you want to save an object in the file you must use Serializable</li></ol>"
	}, {
		"id": 60,
		"category": "android",
		"subType": "android",
		"question": "Explain the Android Interface Definition Language",
		"referenceLink": "",
		"answer": "Android Interface Definition Language (AIDL) enables communication between a client and service on Android. The data is broken into small portions that are easily recognized by the Android platform."
	}, {
		"id": 61,
		"category": "android",
		"subType": "android",
		"question": "What is an “Emulator”?",
		"referenceLink": "",
		"answer": "Android’s emulator tool helps developers test the user interface on a computer. This way, it becomes easier for developers to write and test different codes for the application. The process of debugging also becomes possible through emulators. Thus, emulators provide a safe platform for testing codes in their early phases and the later stage when the bugs need to be dealt with."
	}, {
		"id": 62,
		"category": "android",
		"subType": "android",
		"question": "What is an Activitycreator?",
		"referenceLink": "",
		"answer": "An ActivityCreator is an initial step toward creating the Android project. It’s a shell script that creates a new file system necessary for writing codes for the Android system."
	}, {
		"id": 63,
		"category": "android",
		"subType": "android",
		"question": "What is Android Runtime?",
		"referenceLink": "",
		"answer": "<b>Android Runtime (ART)</b> is an application that acts as a runtime environment for Android OS. It replaces Dalvik, another discontinued virtual machine. ART translates the bytecode of applications into native instructions, which are carried out by the device’s runtime environment."
	}, {
		"id": 64,
		"category": "android",
		"subType": "android",
		"question": "Explain the term ANR",
		"referenceLink": "",
		"answer": "The Android OS displays the term ANR for short as a notification that pops up in the lower section of your device’s screen every time an app stops responding to the user’s action for a considerable amount of time."
	}, {
		"id": 65,
		"category": "android",
		"subType": "android",
		"question": "What are Android Frameworks?",
		"referenceLink": "",
		"answer": "<p><a href='https://www.intellectsoft.net/blog/best-android-frameworks/' rel='noopener ugc nofollow' target='_blank'><strong>Android frameworks</strong></a>&nbsp;are a set of APIs that allow developers to write apps more quickly by providing tools such as intents, text fields and more. The frameworks essentially act as a software tool kit that allows for quick construction of the skeleton of an application.</p>"
	}, {
		"id": 66,
		"category": "android",
		"subType": "android",
		"question": "What is an API in Android?",
		"referenceLink": "",
		"answer": "An Application Programming Interface (API) is simply a set of specifications or rules that determine how software components can interact with each other. Companies that release an API do so to let developers build products based on their services."
	}, {
		"id": 67,
		"category": "android",
		"subType": "android",
		"question": "Can we prevent ANR in the Android system?",
		"referenceLink": "",
		"answer": "<b>Yes</b>, it is possible to prevent ANR in the Android system. ANR (Application Not Responding) occurs when the Android system stops an app that has been responsive for a long time. The prevention can be made by creating a child thread wherein most of the actual workings of the codes can be applied."
	}, {
		"id": 68,
		"category": "android",
		"subType": "android",
		"question": "What are Default Resources? How are they useful?",
		"referenceLink": "",
		"answer": "Dalvik serves as a virtual machine responsible for running every Android application. Because of Dalvik, a device can run multiple instances of virtual machines smoothly."
	}, {
		"id": 69,
		"category": "android",
		"subType": "android",
		"question": "How to Reduce APK Size in Android?",
		"referenceLink": "https://www.geeksforgeeks.org/how-to-reduce-apk-size-in-android/",
		"answer": "<p>Some ways to reduce the apk size:</p><ul><li>&nbsp;Remove unused sources</li><li>&nbsp;Use of Vector Drawables</li><li>&nbsp;Reuse your code&nbsp;</li><li>&nbsp;Compress PNG and JPEG files</li><li>&nbsp;Use of Lint</li><li>&nbsp;Use images in WebP file format</li><li>&nbsp;Use of proguard<ul><li><p>&nbsp;It makes the application difficult to reverse engineer.</p></li><li>&nbsp;It helps to reduce the size of the application by removing the unused classes and methods.</li></ul></li><li>&nbsp;Use of ShrinkResources</li><li>&nbsp;Use of R8 to reduce the size of APK</li><li>&nbsp;Limit the usage of external libraries</li><li>&nbsp;Use the Android Size Analyzer tool</li><li>&nbsp;Generate App Bundles instead of APK</li><li>&nbsp;Use of Multiple APK files</li><li>&nbsp;Reduce library size&nbsp;</li><li>&nbsp;Use of Resconfigs</li><li>&nbsp;Remove libraries that are only required for debugging</li></ul><p>&nbsp;</p>"
	}, {
		"id": 70,
		"category": "android",
		"subType": "android",
		"question": "What is PendingIntents?",
		"referenceLink": "https://medium.com/androiddevelopers/all-about-pendingintents-748c8eb8619",
		"answer": "<p>A&nbsp;<strong><code>PendingIntent</code></strong>&nbsp;object wraps the functionality of an&nbsp;<code>Intent</code>&nbsp;object while allowing your app to specify something that another app should do, on your app&rsquo;s behalf, in response to a future action. For example, the wrapped intent might be invoked when an alarm goes off, or when the user taps on a notification.</p><p><em>A key aspect of pending intents is that another app invokes the intent&nbsp;on your app&rsquo;s behalf. That is, the other app uses your app&rsquo;s identity when invoking the intent.</em></p><p>In order for the&nbsp;<code>PendingIntent</code>&nbsp;to have the same behavior as if it were a normal&nbsp;<code>Intent</code>, the system triggers the&nbsp;<code>PendingIntent</code>&nbsp;with the same identity as it was created with. In most situations, such as the alarm and notifications, this is the identity of the app itself.</p><p>&nbsp;</p><p><strong>Immutable PendingIntent:</strong></p><p style='margin-left:40px'>In this pendingIntent we have an exact action we know we want to perform, we construct a&nbsp;<code>PendingIntent</code>&nbsp;that cannot be modified by the app we pass it to by utilizing a flag called&nbsp;<code><a href='https://developer.android.com/reference/kotlin/android/app/PendingIntent#FLAG_IMMUTABLE:kotlin.Int' rel='noopener ugc nofollow' target='_blank'>FLAG_IMMUTABLE</a></code></p><p style='margin-left:40px'>&nbsp;</p><p><strong>Mutable PendingIntent:</strong></p><p style='margin-left:40px'>In this pendingIntent we can modifiy the pendingIntent by the reveiver app or the app we pass it, we use this by flag called&nbsp;<code><a href='https://developer.android.com/reference/kotlin/android/app/PendingIntent#FLAG_MUTABLE:kotlin.Int' rel='noopener ugc nofollow' target='_blank'>FLAG_MUTABLE</a></code></p><p style='margin-left:40px'>&nbsp;</p><p><code><a href='https://developer.android.com/reference/kotlin/android/app/PendingIntent#FLAG_IMMUTABLE:kotlin.Int' rel='noopener ugc nofollow' target='_blank'>FLAG_IMMUTABLE</a></code>: Indicates the Intent inside the&nbsp;<code>PendingIntent</code>&nbsp;cannot be modified by other apps that pass an&nbsp;<code>Intent</code>&nbsp;to&nbsp;<code>PendingIntent.send()</code>. An app can always use&nbsp;<code>FLAG_UPDATE_CURRENT</code>&nbsp;to modify its own PendingIntents</p><p>Prior to Android 12, a&nbsp;<code>PendingIntent</code>&nbsp;created without this flag was mutable by default.</p><p><code><a href='https://developer.android.com/reference/kotlin/android/app/PendingIntent#FLAG_MUTABLE:kotlin.Int' rel='noopener ugc nofollow' target='_blank'>FLAG_MUTABLE</a></code>: Indicates the Intent inside the&nbsp;<code>PendingIntent</code>&nbsp;should allow its contents to be updated by an app by merging values from the intent parameter of&nbsp;<code>PendingIntent.send()</code>.</p>"
	}, {
		"id": 71,
		"category": "android",
		"subType": "android",
		"question": "Whats new in Android 12 for developers?",
		"referenceLink": "https://proandroiddev.com/review-of-android-12-for-developers-ea3ce9247e0",
		"answer": "<h5>The main emphasis in the Android 12 release was made on enhancing OS security and data privacy, as well as redesigning the system.</h5><ol><li>Design<ul><li>New Material You design</li><li>Standard Splash Screen for all apps&nbsp;</li></ul></li><li>&nbsp;Updating UI effects<ul><li>&nbsp;Ripple effect</li><li>&nbsp;Overscroll</li><li>&nbsp;​RenderEffect API</li></ul></li><li>​​​​​​&nbsp;Widgets<ul><li>&nbsp;Rounded edges on the background of all widgets on Android 12+</li><li>&nbsp;Widgets can use dynamic colors from the theme, which are new to Material You</li><li>&nbsp;Initial widget setup may be optional and you may skip this step</li><li>&nbsp;CheckBox, Switch and RadioButton support has been added. Various Todo lists and applications with settings via toggle switches</li></ul></li><li>&nbsp;Rounded Corner API</li><li>&nbsp;Rich Content Insertion</li><li>&nbsp;Notifications<ul><li>I n MessagingStyle and BigPictureStyle you can add animated pictures</li><li>&nbsp;You can require mandatory user authorization before sending the Intent</li><li>&nbsp;New call notification style CallStyle, which allows you to create different styles for incoming, outgoing and ongoing calls. You can also set the importance for calls</li><li>&nbsp;The area in the notification allocated for Custom View is now getting smaller</li></ul></li><li>Media<ul><li>&nbsp;AVIF support</li><li>&nbsp;Compatible Media Transcoding</li></ul></li><li>Other<ul><li>&nbsp;Vibration feedback generation based on audio stream. It will be very useful for games</li><li>&nbsp;The ability to use a high-resolution camera has been added, meaning you can capture 108 megapixels and other huge sizes.</li><li>&nbsp;When switching audio between applications, the volume will fade instead of an abrupt pause.</li><li>&nbsp;Camera2 API now contains extensions for using special modes similar to CameraX Extentions</li></ul></li><li>Security and privacy<ul><li>&nbsp;Approximate location</li><li><strong>&nbsp;Expedited Jobs API(Important):</strong>​​​​​​&nbsp;Expedited job allows an application to perform short, important tasks while giving the system better control over access to resources. Expedited Job is between the Foreground Service and a regular job from the JobScheduler in terms of its characteristics:<ul><li>A short period is a couple of minutes. If your job takes longer, the system may stop the expedited job.</li><li>Expedited job is less susceptible to management effects from battery saver systems such as Battery Saver and Doze Mode.</li><li>The system starts an expedited job if the system has enough resources for this, and if the number of job already started doesn&rsquo;t exceed the limit set in the system, and also if there is enough free RAM. These requirements are more stringent than other job types.</li></ul></li><li><strong>&nbsp;Restrictions on the use of the Foreground Service (Important)</strong></li><li><p>The main change in Android 12 that will confuse Android developers is that the Foreground Service can no longer be launched from the background, except in a few cases. If you have an unsuccessful attempt to start the Service, the application will crash with a ForegroundServiceStartNotAllowedException.</p><p>The following cases are exceptional:</p><ul><li>&nbsp;High Priority Push</li><li>&nbsp;As a reaction to broadcasts ACTION_BOOT_COMPLETED, ACTION_LOCKED_BOOT_COMPLETED, or ACTION_MY_PACKAGE_REPLACED</li><li>&nbsp;Application has special permissions or roles</li><li>&nbsp;Application ignores battery optimizations</li><li>&nbsp;Exact alarm</li><li>&nbsp;and some other specific cases</li></ul></li><li>&nbsp;Applications hibernation</li></ul></li></ol><p style='margin-left:80px'>In Android 11, the automatic reset of permissions for unused applications was implemented successfully. If the user doesn&rsquo;t interact with your application for a very long time (several months), then the system will reset all received permissions and send him to hibernation:</p><ul style='margin-left:80px'><li>&nbsp;The application cache will be cleared</li><li>&nbsp;The application will not be able to run job or alert in background</li><li>&nbsp;The application will not receive push notifications, including high-priority FCM</li><li>&nbsp;All restrictions will be removed after the first interaction with your application, but you will need to re-create the job, alarm and notifications that you need. Similar behavior is&nbsp;similar when the user forcibly stops applications in the settings</li><li>&nbsp;You can ask the user to turn off the &ldquo;Revoke permissions and clear memory&rdquo; setting in the settings if your application involves working in the background, for example, sending a location between family members.<ul></ul></li></ul>"
	}, {
		"id": 72,
		"category": "android",
		"subType": "android",
		"question": "Memory Leaks in Android?",
		"referenceLink": "https://medium.com/@amritlalsahu5/all-about-memory-leaks-in-android-7c0e5c8d679c",
		"answer": "<p><em>When your code allocates&nbsp;</em><strong><em>memory</em></strong><em>&nbsp;to an object, but never de-allocates it.</em></p><p>&nbsp;</p><p><strong>What is memory Leak in Android?</strong><br/>Whenever an object(A) which is not required anymore is being referenced by some other object(B) which is currently in use, would make garbage collector to consider the object(A) as an useful object .Hence GC will not be able to remove the object(A) thinking somebody is still dependent on this. This eventually leads to Memory leaks.</p><p>&nbsp;</p><p><strong>How Garbage collector works?</strong></p><p>Before we proceed further, let us understand briefly how Garbage collector works in Android.</p><p><em>&ldquo;Garbage collection is the process by which Android programs perform automatic memory management using several GC algorithm e.g Mark and Sweep.</em></p><p><em>Whenever an android application starts, it creates one memory tree considering starting object as root of the tree. Root creates some other objects which can have its reference directly or indirectly and some other object being instantiated from these objects resulting in a chain of references and thus forms a memory tree.</em></p><p><em>Garbage collector starts from GC root and traverse to each and every objects reference linked directly or indirectly to the root and mark it as currently in use.All the unmarked object references are considered as unused and are eligible for garbage collection.</em></p><p><em>Now, just think of the scenario where some unused object which needs to removed from memory is being marked as active by GC only because someone has reference of it. Thus, it will not eligible for garbage collection resulting in memory leaks&rdquo;.</em></p><p>&nbsp;</p><p><strong>How Memory leak can ruin your party ?</strong></p><p>Whenever memory leaks happens, objects memory is not getting de-allocated even if they are unused, heaps memory keeps on increasing as the app is being used. This leads to the following problems:</p><p style='margin-left:40px'>1. As memory is required to create new objects to perform some tasks, app will have shortage of available memory .As a result Android system will trigger more frequent GC event than usual to claim the necessary memory.&nbsp;<em>More the GC has to run, more the application performance deteriorates.</em></p><blockquote><p><strong>GC events are stop-the-world events which means when GC happens, the rendering of UI and processing of events will stop.</strong></p><p>&ldquo;This impacts depend upon the types of GC events . When minor GCs will not be able to reclaim the memory, and the heap will keep on increasing, system will force a larger GC to kick off, which pauses the entire application main thread for around 50ms to 100ms. Since, Android has a 16ms drawing window and GC takes long than that, Android will start losing frames and lagging seriously .Generally, 100 to 200ms is the threshold beyond which users will perceive slowness in an application.&rdquo;</p></blockquote><p>&nbsp;</p><p style='margin-left:40px'>2. If previous steps problem does not get solved, heap memory of the app will gradually increase .As a result, app will ask for more memory , however at one point of time system will refuse to allocate further memory which eventually leads to &ldquo;<strong>OutOfMemoryError</strong>&rdquo; and&nbsp;<strong>App crashes</strong>.</p><p>&nbsp;</p><p><strong>How to identify a memory leak?</strong></p><ol><li><strong>&nbsp;Using Android Profiler:</strong><p>The&nbsp;<strong>Memory Profiler</strong>&nbsp;is a component in the&nbsp;<a href='https://developer.android.com/studio/preview/features/android-profiler.html' rel='noopener ugc nofollow' target='_blank'>Android Profiler</a>&nbsp;that helps you identify memory leaks and memory churn that can lead to stutter, freezes, and even app crashes. It shows a realtime graph of your app&rsquo;s memory use and lets you capture a heap dump, force garbage collections, and track memory allocations.</p><p>To open the Memory Profiler, follow these steps:</p><ol><li><p><em>&nbsp;Click&nbsp;</em><strong><em>View &gt; Tool Windows &gt; Profiler</em></strong><em>&nbsp;(you can also click&nbsp;</em><strong><em>Profile</em></strong><em>&nbsp;in the toolbar).</em></p></li><li><p>&nbsp;<em>Select the device and app process you want to profile from the Android Profiler toolbar.</em></p></li><li><p>&nbsp;<em>Click anywhere in the&nbsp;</em><strong><em>MEMORY</em></strong><em>&nbsp;timeline to open the Memory Profiler.</em><br/><br/><em>Alternatively, you can inspect your app memory from the command line with&nbsp;</em><a href='https://developer.android.com/studio/command-line/dumpsys.html' rel='noopener ugc nofollow' target='_blank'><em>dumpsys</em></a><em>, and also&nbsp;</em><a href='https://developer.android.com/studio/debug/am-logcat.html#memory-logs' rel='noopener ugc nofollow' target='_blank'><em>see GC events in logcat</em></a><em>.</em><br/><br/><em>When you first open the Memory Profiler, you&rsquo;ll see a detailed timeline of your app&rsquo;s memory use and access tools to force garbage collection, capture a heap dump, and record memory allocations.</em></p></li></ol></li><li><p><strong>Using LeakCanary:</strong><br/><strong>LeakCanary is a open source library given by square for memory leak detection in Android.</strong><br/>It runs along with your application, dumps memory whenever required, identify potential memory leaks and gives a notification with a clean and complete stack trace to find the root cause of the leak.</p></li></ol><p>&nbsp;</p><p><strong>Common patterns that lead to memory leaks &amp; how to fix them</strong><br/><br/>1. <strong>Unregistered Listeners:</strong></p><p>There are multiple scenarios when we register a listener to Activity or Fragment but forget to unregister it. These listeners hold strong reference to it and prevent it from being garbage collected even when it is unused.<br/><br/><strong>2. Unregistered Local Broadcast receivers:</strong><br/>Sometimes we need to register a local broadcast receiver in an activity.</p><p>However, if we don&rsquo;t unregister it, it holds the strong reference to the activity .Even if activity is no longer needed reference prevents it to be garbage collected and hence memory leak occurs.</p><p><strong>3. Inner Class Reference(AsyncTask in this case):</strong><br/>Inner class are very commonly used by many Android developers to perform various task .However , non-static Inner class unknowingly holds the implicit reference of the parent class which can lead to memory leaks.</p><p style='margin-left:40px'>Solution :</p><p style='margin-left:40px'>Make the inner class as static.<br/>Do not pass any Outer class(Activity/Fragment) reference to inner class. If at all, reference is required, pass it as Weak reference.</p><p><strong>4. Anonymous Class Reference:</strong><br/>Similar to non static inner class, anonymous class also holds implicit reference to parent class. Therefore, it is recommended to use static inner class wherever anonymous class is intended to do long running process.</p><p><strong>5. Handler Reference :</strong><br/>When a Handler is instantiated on the main thread, it is associated with the Looper&#39;s message queue. Messages posted to the message queue will hold a reference to the Handler so that the framework can call Handler#handleMessage(Message) when the Looper eventually processes the message.It is very nicely explained here.</p><p><strong>6. Thread &amp; Timer Task :</strong><br/>We can come across the same pattern of memory leak while dealing with Thread and TimerTask as well.Solution is again similar as previously discussed.</p><p style='margin-left:40px'>Solution 1 : Create static inner class to avoid holding of an implicit reference to their enclosing class.</p><p style='margin-left:40px'>Solution 2: Close the thread in activity#onDestroy() to avoid thread leak. In case of TimerTask cancel it .</p><p><strong>7. Other scenarios:</strong><br/>There are other obvious mistakes which can lead to memory leak and must be avoided by Android developers. These scenarios do not require detail discussion, so just pointing them out here:</p><p>&middot; Assigning Activity instance to static reference.</p><p>&middot; Passing Activity reference or context to a Singleton class.</p><p>&middot; Passing Activity reference as listener to some other class and holding strong reference of it.</p><p>&middot; Creating static view reference.</p><p>&middot; Improper use of Context. Here is an excellent article to find out exactly which Context to use.</p><p>&middot; Inefficient use of Bitmaps without recycling it. This may leads to OutOfMemoryError. Please find the proper way of handling it Here.</p>"
	}, {
		"id": 73,
		"category": "android",
		"subType": "android",
		"question": "What are android app security best practices?",
		"referenceLink": "https://medium.com/@amritlalsahu5/how-to-develop-a-secure-android-app-b4ec103ece8c",
		"answer": "<ol><li><strong>&nbsp;Maintain Secure communication with other apps</strong><blockquote><p><em>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;<br/>package=&quot;com.example.myapp&quot;&gt;<br/>&lt;permission android:name=<strong>&quot;my_custom_permission_name&quot;</strong><br/><strong>android:protectionLevel=&quot;signature&quot;</strong> /&gt;</em></p></blockquote><p>&nbsp;</p><ul><li>&nbsp;Use<strong> implicit intents</strong> to show app chooser that provides option to user to launch at least two possible apps on the device for the requested action. This allows users to transfer sensitive information to the app that they trust.</li><li>&nbsp;<strong>Non-exported content providers</strong>&nbsp;&mdash; Unless you intend to send data from your app to other apps, explicitly disallow other apps to access your&nbsp;<a href='https://developer.android.com/reference/android/content/ContentProvider' rel='noopener ugc nofollow' target='_blank'>ContentProvider</a>&nbsp;in manifest using&nbsp;<strong>android:exported=&rdquo;false&rdquo;(</strong>by default it is &ldquo;true&rdquo; for Android version lower than 4.4 ).</li><li><strong>&nbsp;Apply signature-based permissions</strong>&nbsp;while sharing data between two apps that is controlled by you. These permissions do not need user confirmation, but instead it checks that the apps accessing the data are signed using the same signing key. Hence offer more streamlined and secure user experience.</li></ul></li><li><p>&nbsp;<strong>Secure Network communication</strong></p><ul><li><p>Communication with web server having&nbsp;<strong>well-known trusted CA certificate</strong>&nbsp;does need any additional steps to take while creating the http request.</p></li><li><strong>By adding a network security configuration:</strong>&nbsp;If your app uses new or custom CAs, you can declare your network&rsquo;s security settings in a configuration file. This process allows you to create the configuration without modifying any app code.</li><li><strong>Create your own trust manager</strong>&nbsp;If web server has a certificate signed by a new or custom CA which is not trusted by the mobile device and additionally you cannot use a network security configuration.<br/>For this scenario, you may need to set up a trust manager and handle all SSL warnings that occurs .</li><li><a href='https://developer.android.com/training/articles/security-config#CertificatePinning' rel='noopener ugc nofollow' target='_blank'><strong>Certificates Pinning</strong></a><strong>&nbsp;:</strong>Application can be limited to accept only a set of certificates by either limiting the set of CAs they trust or by certificate pinning.<br/>&nbsp;</li></ul></li><li><strong>Provide the right permissions<br/><em>App should request only the minimum number of permissions necessary to function properly.</em></strong><p>It should not add a permission to complete an action that could be completed in another app. Instead, use an intent to defer the request to a different app that already has the necessary permission.</p><p>For example, If an App requires to create a contact to a contact app,delegates the responsibility of creating the contact to a contacts app, which has already been granted the appropriate WRITE_CONTACTS permission.</p></li><li><p>&nbsp;<strong>Security on data storage</strong></p><a href='https://developer.android.com/guide/topics/security/cryptography' rel='noopener ugc nofollow' target='_blank'><strong>Cryptography&nbsp;</strong></a><strong>is the most efficient way to achieve data security.&nbsp;</strong>Hence, Use appropriate&nbsp;<strong>Encryption</strong>&nbsp;mechanism while dealing with data inside app. To achieve greater key security, use the&nbsp;<a href='https://developer.android.com/training/articles/keystore' rel='noopener ugc nofollow' target='_blank'>Android Keystore system</a>. Please find a nice article on Encryption&nbsp;<a href='https://proandroiddev.com/secure-data-in-android-encryption-7eda33e68f58' rel='noopener ugc nofollow' target='_blank'>here</a>.<br/>Following describes the best practices for storing data in your device.<ul><li><strong>Storing private data within internal storage</strong></li><li><strong>Use external storage cautiously</strong></li><li><strong>Use scoped directory access:&nbsp;</strong>If your app needs to access only a specific directory within the device&rsquo;s external storage, use&nbsp;<a href='https://developer.android.com/training/articles/scoped-directory-access' rel='noopener ugc nofollow' target='_blank'>scoped directory access</a>&nbsp;to limit your app&rsquo;s access to a device&rsquo;s external storage accordingly.</li><li><p><strong>Access app-specific files:&nbsp;</strong>If a file doesn&rsquo;t contain private or sensitive information but provides value to the user only in your app, store the file in an&nbsp;<a href='https://developer.android.com/training/data-storage/app-specific#external' rel='noopener ugc nofollow' target='_blank'>app-specific directory on external storage</a>.</p><ul><li><p><strong>&nbsp;Store only non-sensitive data in cache files</strong></p></li><li><p><strong>&nbsp;Use SharedPreferences in private mode</strong></p><p>To create or access your your app&rsquo;s&nbsp;<code><a href='https://developer.android.com/reference/android/content/SharedPreferences' rel='noopener ugc nofollow' target='_blank'>SharedPreferences</a></code>&nbsp;objects using&nbsp;<code><a href='https://developer.android.com/reference/android/content/Context#getSharedPreferences(java.lang.String,%20int)' rel='noopener ugc nofollow' target='_blank'>getSharedPreferences()</a></code>, use&nbsp;<code><a href='https://developer.android.com/reference/android/content/Context#MODE_PRIVATE' rel='noopener ugc nofollow' target='_blank'>MODE_PRIVATE</a></code>&nbsp;so that your app can access the information within the shared preferences file.</p><p>Moreover,&nbsp;<code><a href='https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences' rel='noopener ugc nofollow' target='_blank'><strong>EncryptedSharedPreferences</strong></a></code>should be used for more security which wraps the sharedpreferences class and automatically encrypts keys and values.</p></li></ul></li></ul></li><li><p>&nbsp;<strong>Keep dependencies and libraries up-to-date to make these points of communication more secure.</strong></p></li><li><strong>Shrink, obfuscate, and optimize your code with the&nbsp;<em>R8 compiler</em></strong><p>If you are building your project using&nbsp;<a href='https://developer.android.com/studio/releases/gradle-plugin#3-4-0' rel='noopener ugc nofollow' target='_blank'>Android Gradle plugin 3.4.0</a>&nbsp;or higher, the plugin no longer uses ProGuard to perform compile-time code optimization. Instead, the plugin works with the&nbsp;<em>R8 compiler</em>&nbsp;to handle the following compile-time tasks:</p><p><strong>Code shrinking (or tree-shaking):</strong>&nbsp;detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies (making it a valuable tool for working around the 64k reference limit).</p><p><strong>Resource shrinking:</strong>&nbsp;removes unused resources from your packaged app, including unused resources in your app&rsquo;s library dependencies.</p><p><strong>Obfuscation:</strong>&nbsp;shortens the name of classes and members, which results in reduced DEX file sizes.</p><p><strong>Optimization:</strong>&nbsp;inspects and rewrites your code to further reduce the size of your app&rsquo;s DEX files.</p></li></ol>"
	}, {
		"id": 74,
		"category": "android",
		"subType": "android",
		"question": "Android design pattern in brife?",
		"referenceLink": "https://blog.mindorks.com/mastering-design-patterns-in-android-with-kotlin",
		"answer": "<p><strong>Defination:</strong></p><p>Design patterns is basically a solution or blueprint for a problem that we get over and over again in programming, so they are just typical types of problems we can encounter as programmers, and these design patterns are just a good way to solve those problems, there is a lot of design pattern in android.</p><p>It is basically a pattern that can be followed to solve a particular feature. These are the best practices that can be used by any programmer to build an application.</p><p>The following are some of the benefits of using Design Pattern in Android:</p><ul><li><strong>&nbsp;Understandable code:</strong>&nbsp;By using Design Pattern, you can make your code understandable to everyone i.e. for writing code, you can follow certain guidelines and anyone can understand why you have written that code.&nbsp;<strong><em>For example</em></strong>, if you are using singleton pattern, then anyone viewing your code can understand that here you want to make only one object of a class and you want to access the same object throughout the application.</li><li><strong>&nbsp;Code reusability:</strong>&nbsp;By following the Design Pattern, you can make your code reusable i.e. for performing a certain task at more than one place, you need not write the same code again and again at various places.</li><li><strong>&nbsp;Cleaner code:</strong>&nbsp;You can make your code cleaner by decoupling the code and it will make the code easier to understand by using Design Pattern.</li></ul><p>There are a number of Design Patterns that can be used in Software Development and all these can be classified into the following three categories:</p><ul><li>&nbsp;Creational Pattern</li><li>&nbsp;Structural Pattern</li><li>&nbsp;Behavioural Pattern</li></ul><p><u><strong>Creational Pattern:</strong></u><br/><br/>The Creational Pattern is used to create some object without showing the logic or the steps that are involved in creating the object. So, every time you want an object, you need not instantiate the object by using the new operator. So, this makes the creation of object easier and can be easily created again and again. Some of the examples of Creational Pattern are<strong> Builder, Singleton, and Dependency Injection.</strong></p><ul><li><strong>&nbsp;Builder pattern:</strong></li></ul><p style='margin-left:40px'>In a builder pattern, you are only concerned about what you need from a class and not everything that a class has.&nbsp;For example, when you go to buy some laptop, then you have a list of important features that you want in your laptop like processors, ram, storage, etc. Apart from these features, all the other features like the speaker, battery, etc are some of the optional features for you. So, based on the important features, the shopkeeper will provide you with a laptop that contains all your important features.</p><p style='margin-left:40px'>Similarly, when we have a model class and that class is having a number of parameter out of which some are important and some are not important then we can use the Builder pattern. By using the Builder pattern, the user need not call all the methods(as in the case of constructors) present in the class. The user can call only the required methods and even the order of calling of the method is not fixed i.e you can call any method before and after any method. There is no need for new keyword here(for java).<br/>&nbsp;</p><p style='margin-left:40px'>One of the common examples of Builder pattern that we all use in our daily life is that of AlertDialog. In AleartDialog, we call only the required methods like:</p><blockquote><p>AlertDialog.Builder(this)<br/>&nbsp; &nbsp; .setTitle(&quot;This is a title&quot;)<br/>&nbsp; &nbsp; .setMessage(&quot;This is some message&quot;)<br/>&nbsp; &nbsp; .show()</p></blockquote><p>&nbsp;</p><ul><li><strong>&nbsp;Singleton pattern</strong><br/>There are cases when you need&nbsp;<strong>only one instance of a class</strong>. So, whenever you call the object of the class, then the new object should not be created(only one-time object creation will be there). This design pattern provides a global point of access to a class.&nbsp;<strong><em>For example</em></strong>, the network connection in an application should be done once and not every time because it is a very expensive process. So in these cases, we can use a singleton.<br/>&nbsp;</li><li><strong>&nbsp;Dependency Injection pattern</strong><br/>Most of the classes have some dependency that is needed for the proper functioning of the class. In the general case, we hard-code all the dependencies needed in the class inside the class itself. But this is a very wrong way of providing dependency to a class because in future if the class requires some more dependency or you want to add more dependency, then you have to update the new dependency in all the classes that will be using that dependency.<p><strong><em>For example</em></strong>, a car needs an engine to run. So, instead of providing the engine inside the same car class, we should provide the engine from outside the car class.</p><p><em><strong>So, in the Dependency Injection pattern, we provide the dependency of a class from outside the class and no dependency will be provided in the same class</strong>.</em></p></li></ul><h4><u><strong>Structural Pattern:</strong></u><br/><br/>In this Design Pattern, we are concerned about the structure of the code. Here we follow some particular structural pattern that will help in understanding the code and the working of code just by looking at the structure of the code. Some of the common Structural Pattern used are <strong>Adapter, Bridge, Facade, Proxy, etc.</strong></h4><ul><li><strong>&nbsp;Adapter pattern</strong><br/>An Adapter is something like a connector that is used to connect two or more incompatible interface. This pattern lets the classes work together.<br/>In Android, RecyclerView and PagerAdapter are some of the good examples of the Adapter pattern.<br/>&nbsp;</li><li><strong>&nbsp;Facade pattern</strong><br/>In the Facade pattern, a complicated system is wrapped into a simpler system that will help us in getting the values from the complicated system without having knowledge of how the data is being fetched and returned to the view or the presenter.<br/>&nbsp;</li></ul><p><u><strong>Behavioural Pattern:</strong></u><br/>Behavioural Pattern mainly tells how the objects of the classes will communicate with each other. These patterns help us in understanding the code in a better way because by viewing the code we can identify the pattern and then we can understand the code in a better way. Some of the behavioural patterns are Chain of Responsibility, <strong>Interpreter, Mediator, Observer, Command, Model View Controler, Model View ViewModel, etc.</strong></p><ul><li><strong>&nbsp;Observer pattern</strong><p>The observer pattern is like one-to-many(or one) dependencies between objects.&nbsp;<strong><em>For example</em></strong>, on YouTube, you can subscribe to a particular channel and if some video is uploaded on that channel then all its subscriber will be notified about the change or about the new video.</p><p>So, in Android also, when there is a change in some object, then the dependents of that object will be notified about the change and the possible update will be made accordingly in the dependents. This is called an Observer pattern because here we are observing for some change in the object.</p><p><strong><em>For example</em></strong>, In Android, LiveData is an observable data holder class that enables the use of an observer pattern.</p><p><strong><a href='https://blog.mindorks.com/understanding-livedata-in-android' target='_blank'>Learn how to use LiveData in Android.</a></strong></p><p>Also, RxJava enables the use of an observer pattern in Android.</p><p><strong><a href='https://blog.mindorks.com/a-complete-guide-to-learn-rxjava-b55c0cea3631' target='_blank'>Learn RxJava</a></strong>.</p></li><li><p><strong>Model View Controller pattern</strong></p><p>Model View Controller or MVC is an Architectural Design pattern this is used to write an organised code for Android applications. Code following the MVC pattern is divided into three parts:</p><ul><li><strong>Model:</strong>&nbsp;It is the place where you write all your Business logic and data state. So, all the data classes of your application are considered as Model.</li><li><strong>View:</strong>&nbsp;It is the user interface that a user sees. In Android, the user interface is built with the help of XML. So, all the views that the user sees come under this category.</li><li><strong>Controller:</strong>&nbsp;A controller is simply a communication medium between the Model and the View. It takes the user input from the view. It processes the request and it sends the data from the Model to the view.<br/><br/>Nowadays, we don&#39;t use this pattern because it is declared as &quot;<strong>Massive View Controller</strong>&quot; for Android. Instead of MVC, we use MVP and MVVM.<br/>&nbsp;</li></ul></li><li><strong>Model View Presenter</strong><br/><br/>Model View Presenter or MVP is a set of guidelines that are followed to make the code reusable and testable because it decouples the whole code. MVP divides the application into three parts:<ul><li><strong>Model:&nbsp;</strong>It is the place where you write all your Business logic and data state. So, all the data classes of your application are considered as Model.</li><li><strong>View:</strong>&nbsp;It is the user interface that a user sees. In Android, the user interface is built with the help of XML. So, all the views that the user sees come under this category.</li><li><strong>Presenter:</strong>&nbsp;The presenter is responsible for giving the data to the view. If view demands some data from the Model, then it is the presenter that will fetch the data from the Model and provide the data to the view to display the required details.<br/><br/><a href='https://blog.mindorks.com/essential-guide-for-designing-your-android-app-architecture-mvp-part-1-74efaf1cda40#.lkml1yggq' target='_blank'>Learn more about MVP</a><br/>&nbsp;</li></ul></li><li><strong>Model View ViewModel pattern</strong><br/><br/>The Model View ViewModel or MVVC is similar to that of MVC but here the controller is replaced by the ViewModel. The three components of the Model View ViewModel are:<ul><li><strong>Model:&nbsp;</strong>It is the place where you write all your Business logic and data state. So, all the data classes of your application are considered as Model.</li><li><strong>View:</strong>&nbsp;It is the user interface that a user sees. In Android, the user interface is built with the help of XML. So, all the views that the user sees come under this category.</li><li><strong>ViewModel:</strong>&nbsp;It is a bridge between the Model and the View. Here most of the user interface logic is stored. This is mainly used to store and manage the UI-related and it resolves one of the biggest problems of data loss that was faced due to screen rotation.<br/><br/><a href='https://blog.mindorks.com/mvvm-architecture-android-tutorial-for-beginners-step-by-step-guide' target='_blank'>Have a look at our MVVM blog to have a better understanding of the same.</a></li></ul></li><li><strong>Clean Architecture</strong><br/><br/>Clean Architecture defines the way in which the various layers of an app i.e. presentation, use case, domain, data, and framework layer interact with each other. The Clean Architecture produce a system that is testable, UI-independent, and independent of external agencies and libraries<ul></ul></li></ul>"
	}, {
		"id": 75,
		"category": "android",
		"subType": "android",
		"question": "Android Lifecycle Interview Questions",
		"referenceLink": "https://medium.com/mobile-app-development-publication/android-lifecycle-interview-questions-that-some-got-wrong-926b39b19a61",
		"answer": "<p>This is not a single question, but a list of questions related to Android Lifecycle which some got wrong, You can click on <strong>Learn More</strong> to get the correct question.<br/>&nbsp;</p><ol><li>&nbsp;Launch Fragment by Default.</li><li>Create Fragment with Constructor</li><li>Instantiate ViewModel Directly</li><li>ViewModel as StateRestoration Solution</li><li>LiveData as State Restoration Solution</li><li>When is The View Destroyed But Not the Instance</li><li>Lifecycle Aware Coroutine</li></ol>"
	}]
}
