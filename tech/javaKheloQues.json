{
	"allQuestions": [{
		"id": 49,
		"question": "Number of primitive data types in Java are?",
		"category": "java",
		"answer": ["6", "4", "5", "8"],
		"correctAnswer": "8"
	}, {
		"id": 50,
		"question": "Automatic type conversion is possible in which of the possible cases?",
		"category": "java",
		"answer": ["Long to int", "Byte to int", "Int to long", "Short to int"],
		"correctAnswer": "Int to long"
	}, {
		"id": 51,
		"question": "Select the valid statement.",
		"category": "java",
		"answer": ["char[] ch = new char[5]", "char[] ch = new char()", "char[] ch = new char(5)", "char[] ch = new char[]"],
		"correctAnswer": "char[] ch = new char[5]"
	}, {
		"id": 52,
		"question": "When an array is passed to a method, what does the method receive?",
		"category": "java",
		"answer": ["Copy of first element", "A copy of the array", "Length of the array", "The reference of the array"],
		"correctAnswer": "The reference of the array"
	}, {
		"id": 53,
		"question": "Select the valid statement to declare and initialize an array.",
		"category": "java",
		"answer": ["int[] A = (1, 3, 5)", "int[] A = {}", "int[] A = {1, 3, 5}", "int[][] A = {1, 3, 5}"],
		"correctAnswer": "int[] A = {1, 3, 5}"
	}, {
		"id": 54,
		"question": "When is the object created with new keyword?",
		"category": "java",
		"answer": ["At run time", "None", "Depends on the code", "At compile time"],
		"correctAnswer": "At run time"
	}, {
		"id": 55,
		"question": "In which of the following is toString() method defined?",
		"category": "java",
		"answer": ["java.lang.util", "java.lang.Object", "java.lang.String", "None"],
		"correctAnswer": "java.lang.Object"
	}, {
		"id": 56,
		"question": "what compareTo() returns?",
		"category": "java",
		"answer": ["An int value", "true", "false", "None"],
		"correctAnswer": "An int value"
	}, {
		"id": 57,
		"question": "\nIdentify the return type of a method that does not return any value.",
		"category": "java",
		"answer": ["int", "main", "null", "void"],
		"correctAnswer": "void"
	}],
	"interviewQuestions": [{
		"id": 85,
		"category": "java",
		"subType": "java",
		"question": "List the features of Java Programming language.",
		"referenceLink": "https://www.javatpoint.com/corejava-interview-questions",
		"answer": "<p>There are the following features in Java Programming Language.</p><ul><li><strong>Simple:</strong>&nbsp;Java is easy to learn. The syntax of Java is based on C++ which makes easier to write the program in it.</li><br/><li><strong>Object-Oriented:</strong>&nbsp;Java follows the object-oriented paradigm which allows us to maintain our code as the combination of different type of objects that incorporates both data and behavior.</li><br/><li><strong>Portable:</strong>&nbsp;Java supports read-once-write-anywhere approach. We can execute the Java program on every machine. Java program (.java) is converted to bytecode (.class) which can be easily run on every machine.</li><br/><li><strong>Platform Independent:</strong>&nbsp;Java is a platform independent programming language. It is different from other programming languages like C and C++ which needs a platform to be executed. Java comes with its platform on which its code is executed. Java doesn&#39;t depend upon the operating system to be executed.</li><br/><li><strong>Secured:</strong>&nbsp;Java is secured because it doesn&#39;t use explicit pointers. Java also provides the concept of ByteCode and Exception handling which makes it more secured.</li><br/><li><strong>Robust:</strong>&nbsp;Java is a strong programming language as it uses strong memory management. The concepts like Automatic garbage collection, Exception handling, etc. make it more robust.</li><br/><li><strong>Architecture Neutral:</strong>&nbsp;Java is architectural neutral as it is not dependent on the architecture. In C, the size of data types may vary according to the architecture (32 bit or 64 bit) which doesn&#39;t exist in Java.</li><br/><li><strong>Interpreted:</strong>&nbsp;Java uses the Just-in-time (JIT) interpreter along with the compiler for the program execution.</li><br/><li><strong>High Performance:</strong>&nbsp;Java is faster than other traditional interpreted programming languages because Java bytecode is &quot;close&quot; to native code. It is still a little bit slower than a compiled language (e.g., C++).</li><br/><li><strong>Multithreaded:</strong>&nbsp;We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn&#39;t occupy memory for each thread. It shares a common memory area. Threads are important for multi-media, Web applications, etc.</li><br/><li><strong>Distributed:</strong>&nbsp;Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications. This feature of Java makes us able to access files by calling the methods from any machine on the internet.</li><br/><li><strong>Dynamic:</strong>&nbsp;Java is a dynamic language. It supports dynamic loading of classes. It means classes are loaded on demand. It also supports functions from its native languages, i.e., C and C++.</li></ul>"
	}, {
		"id": 86,
		"category": "java",
		"subType": "java",
		"question": "What do you understand by Java virtual machine?",
		"referenceLink": "https://www.javatpoint.com/corejava-interview-questions",
		"answer": "<p><a href='https://www.javatpoint.com/jvm-java-virtual-machine'>Java Virtual Machine</a>&nbsp;is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is the specification which must be implemented in the computer system. The Java code is compiled by JVM to be a Bytecode which is machine independent and close to the native code.</p>"
	}, {
		"id": 87,
		"category": "java",
		"subType": "java",
		"question": "What is the difference between JDK, JRE, and JVM?",
		"referenceLink": "https://www.javatpoint.com/corejava-interview-questions",
		"answer": "<h5>JVM</h5><p>JVM is an acronym for Java Virtual Machine; it is an abstract machine which provides the runtime environment in which Java bytecode can be executed. It is a specification which specifies the working of Java Virtual Machine. Its implementation has been provided by Oracle and other companies. Its implementation is known as JRE.</p><p>JVMs are available for many hardware and software platforms (so JVM is platform dependent). It is a runtime instance which is created when we run the Java class. There are three notions of the JVM: specification, implementation, and instance.</p><h5>JRE</h5><p>JRE stands for Java Runtime Environment. It is the implementation of JVM. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.</p><h5>JDK</h5><p>JDK is an acronym for Java Development Kit. It is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools. JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:</p><ul><li>Standard Edition Java Platform</li><li>Enterprise Edition Java Platform</li><li>Micro Edition Java Platform</li></ul>"
	}, {
		"id": 88,
		"category": "java",
		"subType": "java",
		"question": "How many types of memory areas are allocated by JVM?",
		"referenceLink": "javatpoint.com/jvm-java-virtual-machine",
		"answer": "<ol><li><strong>Class(Method) Area:</strong>&nbsp;Class Area stores per-class structures such as the runtime constant pool, field, method data, and the code for methods.</li><li><strong>Heap:</strong>&nbsp;It is the runtime data area in which the memory is allocated to the objects</li><li><strong>Stack:</strong>&nbsp;Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return. Each thread has a private JVM stack, created at the same time as the thread. A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.</li><li><strong>Program Counter Register:</strong>&nbsp;PC (program counter) register contains the address of the Java virtual machine instruction currently being executed.</li><li><strong>Native Method Stack:</strong>&nbsp;It contains all the native methods used in the application.</li></ol>"
	}, {
		"id": 89,
		"category": "java",
		"subType": "java",
		"question": "What is JIT compiler?",
		"referenceLink": "https://www.ibm.com/docs/en/ztpf/1.1.0.14?topic=compiler-jit-overview",
		"answer": "<p>The <strong>Just-In-Time (JIT)</strong> compiler is a component of the Java&trade; Runtime Environment that improves the performance of Java applications at run time.</p><p>Java programs consists of classes, which contain platform-neutral bytecodes that can be interpreted by a JVM on many different computer architectures. At run time, the JVM loads the class files, determines the semantics of each individual bytecode, and performs the appropriate computation. The additional processor and memory usage during interpretation means that a Java application performs more slowly than a native application. The JIT compiler helps improve the performance of Java programs by compiling bytecodes into native machine code at run time.</p><p>The JIT compiler is enabled by default, and is activated when a Java method is called. The JIT compiler compiles the bytecodes of that method into native machine code, compiling it&nbsp;&quot;just in time&quot;&nbsp;to run. When a method has been compiled, the JVM calls the compiled code of that method directly instead of interpreting it. Theoretically, if compilation did not require processor time and memory usage, compiling every method could allow the speed of the Java program to approach that of a native application.</p><p>JIT compilation does require processor time and memory usage. When the JVM first starts up, thousands of methods are called. Compiling all of these methods can significantly affect startup time, even if the program eventually achieves very good peak performance.</p>"
	}, {
		"id": 90,
		"category": "java",
		"subType": "java",
		"question": "What are the various access specifiers in Java?\t",
		"referenceLink": "https://www.softwaretestinghelp.com/java/access-modifiers-in-java/",
		"answer": "<p>In Java, access specifiers are the keywords which are used to define the access scope of the method, class, or a variable. In Java, there are four access specifiers given below.</p><p>&nbsp;</p><ol><li><strong>&nbsp;Default:&nbsp;</strong>Whenever a specific access level is not specified, then it is assumed to be &lsquo;default&rsquo;. The scope of the default level is within the package.<ul><li><p>A default access modifier in Java has no specific keyword. Whenever the access modifier is not specified, then it is assumed to be the default. The entities like classes, methods, and variables can have a default access.</p></li><li><p>A default class is accessible inside the package but it is not accessible from outside the package i.e.&nbsp;all the classes inside the package in which the default class is defined can access this class.</p></li><li><p>Similarly a default method or variable is also accessible inside the package in which they are defined and not outside the package.</p></li></ul></li><li>&nbsp;<strong>Public:&nbsp;</strong>This is the most common access level and whenever the public access specifier is used with an entity, that particular entity is accessible throughout from within or outside the class, within or outside the package, etc.<ul><li>A class or a method or a data field specified as &lsquo;public&rsquo; is accessible from any class or package in the Java program. The public entity is accessible within the package as well as outside the package. In general, public access modifier is a modifier that does not restrict the entity at all.</li></ul></li><li><p>&nbsp;<strong>Protected:&nbsp;</strong>The protected access level has a scope that is within the package. A protected entity is also accessible outside the package through inherited class or child class.</p><ul><li><p>The protected access specifier allows access to entities through subclasses of the class in which the entity is declared. It doesn&rsquo;t matter whether the class is in the same package or different package, but as long as the class that is trying to access a protected entity is a subclass of this class, the entity is accessible.</p><p><strong>Note that a class and an interface cannot be protected i.e. we cannot apply protected modifiers to classes and interfaces.</strong></p><p>The protected access modifier is usually used in parent-child relationships.</p></li></ul></li><li><strong>&nbsp;Private:&nbsp;</strong>When an entity is private, then this entity cannot be accessed outside the class. A private entity can only be accessible from within the class.<ul><li><p>The &lsquo;private&rsquo; access modifier is the one that has the lowest accessibility level. The methods and fields that are declared as private are not accessible outside the class. They are accessible only within the class which has these private entities as its members.</p><p>Note that the private entities are not even visible to the subclasses of the class. A private access modifier ensures encapsulation in Java.</p><p><strong>Some points to be noted regarding the Private Access Modifier.</strong></p><ul><li>Private access modifier cannot be used for classes and interfaces.</li><li>The scope of private entities (methods and variables) is limited to the class in which they are declared.</li><li>A class with a private constructor cannot create an object of the class from any other place like the main method. (More details on private constructors has been explained in our earlier tutorial).</li></ul></li></ul></li></ol>"
	}, {
		"id": 91,
		"category": "java",
		"subType": "java",
		"question": "What is the purpose of static methods and variables?",
		"referenceLink": "https://www.javatpoint.com/corejava-interview-questions",
		"answer": "<p>The methods or variables defined as <strong>static</strong> are shared among all the objects of the class. The static is the part of the class and not of the object. The static variables are stored in the class area, and we do not need to create the object to access such variables. Therefore, static is used in the case, where we need to define variables or methods which are common to all the objects of the class.</p><p>For example, In the class simulating the collection of the students in a college, the name of the college is the common attribute to all the students. Therefore, the college name will be defined as&nbsp;<strong>static</strong>.</p><p>&nbsp;</p><p><strong>Static Variable</strong></p><p>When you declare a variable as static, then a single copy of the variable is created and divided among all&nbsp;<a href='https://www.edureka.co/blog/java-tutorial/#obj' rel='noopener noreferrer' target='_blank'>objects</a>&nbsp;at the&nbsp;<a href='https://www.edureka.co/blog/java-objects-and-classes/' rel='noopener noreferrer' target='_blank'>class level</a>. Static variables are, essentially, global variables. Basically, all the instances of the class share the same static variable. Static variables can be created at class-level only.</p><p>&nbsp;</p><p><strong>Static Methods</strong></p><p>When a method is declared with the static keyword, it is known as a static method. The most common example of a static method is the main( ) method. &nbsp;Methods declared as static can have the following restrictions:</p><p>They can directly call other static methods only.</p><p>They can access static data directly.</p><p>&nbsp;</p><p><strong>Static Class</strong></p><p>A class can be made static only if it is a nested class. Nested static class doesn&rsquo;t need a reference of Outer class. In this case, a static class cannot access non-static members of the Outer class.</p>"
	}, {
		"id": 92,
		"category": "java",
		"subType": "java",
		"question": "What is object-oriented paradigm?",
		"referenceLink": "https://www.tutorialspoint.com/object_oriented_analysis_design/ooad_object_oriented_paradigm.htm",
		"answer": "<p>It is a programming paradigm based on objects having data and methods defined in the class to which it belongs. Object-oriented paradigm aims to incorporate the advantages of modularity and reusability. <strong>Objects</strong> are the instances of classes which interacts with one another to design applications and programs. There are the following features of the object-oriented paradigm.</p><ul><li>Follows the bottom-up approach in program design.</li><li>Focus on data with methods to operate upon the object&#39;s data</li><li>Includes the concept like Encapsulation and abstraction which hides the complexities from the user and show only functionality.</li><li>Implements the real-time approach like inheritance, abstraction, etc.</li><li>The examples of the object-oriented paradigm are C++, Simula, Smalltalk, Python, C#, etc.</li></ul>"
	}]
}
